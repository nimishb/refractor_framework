# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_max_a_posteriori', [dirname(__file__)])
        except ImportError:
            import _max_a_posteriori
            return _max_a_posteriori
        if fp is not None:
            try:
                _mod = imp.load_module('_max_a_posteriori', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _max_a_posteriori = swig_import_helper()
    del swig_import_helper
else:
    import _max_a_posteriori
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_max_a_posteriori.SHARED_PTR_DISOWN_swigconstant(_max_a_posteriori)
SHARED_PTR_DISOWN = _max_a_posteriori.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.model_measure
import full_physics_swig.model_state
import full_physics_swig.problem_state
import full_physics_swig.generic_object
class MaxAPosteriori(full_physics_swig.model_measure.ModelMeasure):
    """

    The base class for maximum a posteriori estimation.

    This class is the base class for all classes that use maximum a
    posteriori estimation method to implement the problem of estimating
    the parameters of a statistical model.

    C++ includes: max_a_posteriori.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.model_measure.ModelMeasure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxAPosteriori, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.model_measure.ModelMeasure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxAPosteriori, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _max_a_posteriori.delete_MaxAPosteriori
    __del__ = lambda self: None

    def _v_a_priori_params(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::MaxAPosteriori::a_priori_params() const
        Returns the a priori values (knowledge) of the parameters.

        The a priori values (knowledge) of the parameters 
        """
        return _max_a_posteriori.MaxAPosteriori__v_a_priori_params(self)


    @property
    def a_priori_params(self):
        return self._v_a_priori_params()


    def _v_a_priori_cov(self):
        """

        virtual blitz::Array<double, 2> FullPhysics::MaxAPosteriori::a_priori_cov() const
        Returns the a priori covariance matrix.

        The a priori covariance matrix 
        """
        return _max_a_posteriori.MaxAPosteriori__v_a_priori_cov(self)


    @property
    def a_priori_cov(self):
        return self._v_a_priori_cov()


    def _v_param_a_priori_uncertainty(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::MaxAPosteriori::param_a_priori_uncertainty() const
        Returns the square root of the diagonal of the a-priori covariance
        matrix.

        A-priori covariance matrix is returned by a_priori_cov() method, and
        this method returns the square root of the diagonal of the matrix.

        The square root of the diagonal of the a-priori covariance matrix 
        """
        return _max_a_posteriori.MaxAPosteriori__v_param_a_priori_uncertainty(self)


    @property
    def param_a_priori_uncertainty(self):
        return self._v_param_a_priori_uncertainty()


    def _v_parameter_a_priori_diff(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::MaxAPosteriori::parameter_a_priori_diff() const
        Returns the current parameters value and their a priori value
        difference (current param - a priori param)

        This method is for convenience. It returns the difference of the
        current parameters value and their a priori value.

        Let the following be the current parameters value (a vector) and the
        parameters a prior value (another vector) respectively X

        Xa

        Then this method returns \\[ X - X_a \\]

        The current parameters values and their a-priori value difference
        (current param - a priori param) 
        """
        return _max_a_posteriori.MaxAPosteriori__v_parameter_a_priori_diff(self)


    @property
    def parameter_a_priori_diff(self):
        return self._v_parameter_a_priori_diff()


    def _v_cov_weighted_parameter_a_priori_diff(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::MaxAPosteriori::cov_weighted_parameter_a_priori_diff() const
        Returns the current parameters value and their a priori value
        difference (current param - a priori param) weighted by the inverse of
        the Cholesky decomposition of the a priori covariance matrix.

        This method is for convenience. It returns the current parameters
        value and their a priori value difference weighted by the inverse of
        the Cholesky decomposition of the a priori covariance matrix.

        This method does not have a good name. The "cov_weighted" portion of
        its name suggests that the difference is weighted by the a priori
        covariance matrix, but it is weighted by the inverse of the Cholesky
        decomposition of the covariance matrix.

        Let the following be the current parameters value, the parameters a
        priori value, and the a priori covariance matrix respectively: X

        Xa

        Sa

        Then the Cholesky decomposition of the a priori covariance matrix is
        \\[ S_a = C_a C_a^T \\] and this method returns \\[
        C_a^{-1}(X-X_a) \\]

        The current parameters value and their a priori value difference
        (current param - a priori param) weighted by the inverse of the
        Cholesky decomposition of the a priori covariance matrix 
        """
        return _max_a_posteriori.MaxAPosteriori__v_cov_weighted_parameter_a_priori_diff(self)


    @property
    def cov_weighted_parameter_a_priori_diff(self):
        return self._v_cov_weighted_parameter_a_priori_diff()


    def _v_a_priori_cov_chol_inv(self):
        """

        virtual blitz::Array<double, 2> FullPhysics::MaxAPosteriori::a_priori_cov_chol_inv() const
        Returns the inverse of the Cholesky decomposition of the a priori
        covariance matrix.

        Let the following be the a priori covariance matrix: Sa

        Then the Cholesky decomposition of the a priori covariance matrix is
        \\[ S_a = C_a C_a^T \\] and this method returns \\[ C_a^{-1}
        \\]

        The method cov_weighted_parameter_a_priori_diff() is the
        implementation of a function of the parameters and the method
        a_priori_cov_chol_inv() is the Jacobian of
        cov_weighted_parameter_a_priori_diff().

        The inverse of the Cholesky decomposition of the a priori covariance
        matrix 
        """
        return _max_a_posteriori.MaxAPosteriori__v_a_priori_cov_chol_inv(self)


    @property
    def a_priori_cov_chol_inv(self):
        return self._v_a_priori_cov_chol_inv()


    def _v_weighted_model_measure_diff_aug(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::MaxAPosteriori::weighted_model_measure_diff_aug()
        Returns the vector returned by uncert_weighted_model_measure_diff()
        augmented at the bottom by the vector returned by
        cov_weighted_parameter_a_priori_diff()

        This method is for convenience. It returns an augmented vector. The
        vectors returned by the following methods appear at the top and at the
        bottom of the augmented vector respectively:
        uncert_weighted_model_measure_diff()

        cov_weighted_parameter_a_priori_diff()

        Assume the following: M (computed model)

        S (measurement data)

        Se (measurement error covariance matrix)

        X (current parameters value)

        Xa (parameters a priori value)

        Sa (a priori covariance matrix)

        The Cholesky decomposition of the error covariance matrix is \\[ S_e
        = C_e C_e^T \\] and the Cholesky decomposition of the a priori
        covariance matrix is \\[ S_a = C_a C_a^T \\]

        Then this method returns \\[ \\left[ \\begin{array}{c}
        C_e^{-1}(M-S) ------ C_a^{-1}(X-X_a) \\end{array} \\right] \\]

        The vector returned by uncert_weighted_model_measure_diff() augmented
        at the bottom by the vector returned by
        cov_weighted_parameter_a_priori_diff() 
        """
        return _max_a_posteriori.MaxAPosteriori__v_weighted_model_measure_diff_aug(self)


    @property
    def weighted_model_measure_diff_aug(self):
        return self._v_weighted_model_measure_diff_aug()


    def _v_a_posteriori_covariance(self):
        """

        virtual blitz::Array<double, 2> FullPhysics::MaxAPosteriori::a_posteriori_covariance()
        Returns a-posteriori covariance matrix.

        After the parameters of the model are retrieved such that the model is
        fitted to the measurement data, then a call to this method returns the
        a-posteriori covariance matrix.

        Assume the following: K (computed model Jacobian)

        Se (measurement error covariance matrix)

        Sa (a priori covariance matrix)

        J (the matrix returned by weighted_jacobian_aug())

        Then this method returns \\[ (J^TJ)^{-1} = \\left( K^T S_e^{-1} K
        + S_a^{-1} \\right)^{-1}. \\]

        In the context of the Non-Linear Least Squares (NLLS) problem, where J
        is the Jacobian of the NLLS problem, \\[ (J^TJ)^{-1} \\] is known
        as the best fit covariance.

        I am not sure where the best location to implement this method is.
        Maybe it is better to rename it best_fit_covariance() and add to the
        class NLLSProblem as a method. Or, maybe there are two different
        perspectives of the same thing: a-posteriori covariance

        best fit covariance

        If two perspectives, then perhaps it is best to keep
        a_posteriori_covariance() method here, and also implement
        best_fit_covariance() as a member of NLLSProblem class. If we decide
        to implement both methods, there will not be a lot of duplicate code
        because the body of a_posteriori_covariance() is just a function call.

        A-posteriori covariance matrix 
        """
        return _max_a_posteriori.MaxAPosteriori__v_a_posteriori_covariance(self)


    @property
    def a_posteriori_covariance(self):
        return self._v_a_posteriori_covariance()


    def _v_a_priori_cov_chol(self):
        """

        virtual blitz::Array<double, 2> FullPhysics::MaxAPosteriori::a_priori_cov_chol() const
        Returns the Cholesky decomposition of the a-priori covariance matrix.

        Assume Sa (a priori covariance matrix)

        Then the Cholesky decomposition of the a priori covariance matrix is
        \\[ S_a = C_a C_a^T \\] and this method returns \\[ C_a \\]

        The Cholesky decomposition of the a-priori covariance matrix 
        """
        return _max_a_posteriori.MaxAPosteriori__v_a_priori_cov_chol(self)


    @property
    def a_priori_cov_chol(self):
        return self._v_a_priori_cov_chol()


    def _v_param_a_posteriori_uncertainty(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::MaxAPosteriori::param_a_posteriori_uncertainty()
        Returns the square root of the diagonal of the a-posteriori covariance
        matrix.

        A-posteriori covariance matrix is returned by
        a_posteriori_covariance() method, and this method returns the square
        root of the diagonal of the matrix.

        I am not sure where the best location for implementing this method is;
        however, it should be where a_posteriori_covariance() method is.

        The square root of the diagonal of the a-posteriori covariance matrix

        """
        return _max_a_posteriori.MaxAPosteriori__v_param_a_posteriori_uncertainty(self)


    @property
    def param_a_posteriori_uncertainty(self):
        return self._v_param_a_posteriori_uncertainty()

MaxAPosteriori_swigregister = _max_a_posteriori.MaxAPosteriori_swigregister
MaxAPosteriori_swigregister(MaxAPosteriori)

# This file is compatible with both classic and new-style classes.


