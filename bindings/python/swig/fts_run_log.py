# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fts_run_log', [dirname(__file__)])
        except ImportError:
            import _fts_run_log
            return _fts_run_log
        if fp is not None:
            try:
                _mod = imp.load_module('_fts_run_log', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fts_run_log = swig_import_helper()
    del swig_import_helper
else:
    import _fts_run_log
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_fts_run_log.SHARED_PTR_DISOWN_swigconstant(_fts_run_log)
SHARED_PTR_DISOWN = _fts_run_log.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class FtsRunLogRecord(full_physics_swig.generic_object.GenericObject):
    """

    This is a single FTS run log record.

    C++ includes: fts_run_log.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FtsRunLogRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FtsRunLogRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["spectrum_name"] = _fts_run_log.FtsRunLogRecord_spectrum_name_set
    __swig_getmethods__["spectrum_name"] = _fts_run_log.FtsRunLogRecord_spectrum_name_get
    if _newclass:
        spectrum_name = _swig_property(_fts_run_log.FtsRunLogRecord_spectrum_name_get, _fts_run_log.FtsRunLogRecord_spectrum_name_set)
    __swig_setmethods__["time"] = _fts_run_log.FtsRunLogRecord_time_set
    __swig_getmethods__["time"] = _fts_run_log.FtsRunLogRecord_time_get
    if _newclass:
        time = _swig_property(_fts_run_log.FtsRunLogRecord_time_get, _fts_run_log.FtsRunLogRecord_time_set)
    __swig_setmethods__["latitude"] = _fts_run_log.FtsRunLogRecord_latitude_set
    __swig_getmethods__["latitude"] = _fts_run_log.FtsRunLogRecord_latitude_get
    if _newclass:
        latitude = _swig_property(_fts_run_log.FtsRunLogRecord_latitude_get, _fts_run_log.FtsRunLogRecord_latitude_set)
    __swig_setmethods__["longitude"] = _fts_run_log.FtsRunLogRecord_longitude_set
    __swig_getmethods__["longitude"] = _fts_run_log.FtsRunLogRecord_longitude_get
    if _newclass:
        longitude = _swig_property(_fts_run_log.FtsRunLogRecord_longitude_get, _fts_run_log.FtsRunLogRecord_longitude_set)
    __swig_setmethods__["altitude"] = _fts_run_log.FtsRunLogRecord_altitude_set
    __swig_getmethods__["altitude"] = _fts_run_log.FtsRunLogRecord_altitude_get
    if _newclass:
        altitude = _swig_property(_fts_run_log.FtsRunLogRecord_altitude_get, _fts_run_log.FtsRunLogRecord_altitude_set)
    __swig_setmethods__["solar_zenith"] = _fts_run_log.FtsRunLogRecord_solar_zenith_set
    __swig_getmethods__["solar_zenith"] = _fts_run_log.FtsRunLogRecord_solar_zenith_get
    if _newclass:
        solar_zenith = _swig_property(_fts_run_log.FtsRunLogRecord_solar_zenith_get, _fts_run_log.FtsRunLogRecord_solar_zenith_set)
    __swig_setmethods__["zenith_offset"] = _fts_run_log.FtsRunLogRecord_zenith_offset_set
    __swig_getmethods__["zenith_offset"] = _fts_run_log.FtsRunLogRecord_zenith_offset_get
    if _newclass:
        zenith_offset = _swig_property(_fts_run_log.FtsRunLogRecord_zenith_offset_get, _fts_run_log.FtsRunLogRecord_zenith_offset_set)
    __swig_setmethods__["solar_azimuth"] = _fts_run_log.FtsRunLogRecord_solar_azimuth_set
    __swig_getmethods__["solar_azimuth"] = _fts_run_log.FtsRunLogRecord_solar_azimuth_get
    if _newclass:
        solar_azimuth = _swig_property(_fts_run_log.FtsRunLogRecord_solar_azimuth_get, _fts_run_log.FtsRunLogRecord_solar_azimuth_set)
    __swig_setmethods__["observer_sun_doppler_shift"] = _fts_run_log.FtsRunLogRecord_observer_sun_doppler_shift_set
    __swig_getmethods__["observer_sun_doppler_shift"] = _fts_run_log.FtsRunLogRecord_observer_sun_doppler_shift_get
    if _newclass:
        observer_sun_doppler_shift = _swig_property(_fts_run_log.FtsRunLogRecord_observer_sun_doppler_shift_get, _fts_run_log.FtsRunLogRecord_observer_sun_doppler_shift_set)
    __swig_setmethods__["optical_path_difference"] = _fts_run_log.FtsRunLogRecord_optical_path_difference_set
    __swig_getmethods__["optical_path_difference"] = _fts_run_log.FtsRunLogRecord_optical_path_difference_get
    if _newclass:
        optical_path_difference = _swig_property(_fts_run_log.FtsRunLogRecord_optical_path_difference_get, _fts_run_log.FtsRunLogRecord_optical_path_difference_set)
    __swig_setmethods__["internal_fov"] = _fts_run_log.FtsRunLogRecord_internal_fov_set
    __swig_getmethods__["internal_fov"] = _fts_run_log.FtsRunLogRecord_internal_fov_get
    if _newclass:
        internal_fov = _swig_property(_fts_run_log.FtsRunLogRecord_internal_fov_get, _fts_run_log.FtsRunLogRecord_internal_fov_set)
    __swig_setmethods__["external_fov"] = _fts_run_log.FtsRunLogRecord_external_fov_set
    __swig_getmethods__["external_fov"] = _fts_run_log.FtsRunLogRecord_external_fov_get
    if _newclass:
        external_fov = _swig_property(_fts_run_log.FtsRunLogRecord_external_fov_get, _fts_run_log.FtsRunLogRecord_external_fov_set)
    __swig_setmethods__["angular_misalignment"] = _fts_run_log.FtsRunLogRecord_angular_misalignment_set
    __swig_getmethods__["angular_misalignment"] = _fts_run_log.FtsRunLogRecord_angular_misalignment_get
    if _newclass:
        angular_misalignment = _swig_property(_fts_run_log.FtsRunLogRecord_angular_misalignment_get, _fts_run_log.FtsRunLogRecord_angular_misalignment_set)
    __swig_setmethods__["index_first"] = _fts_run_log.FtsRunLogRecord_index_first_set
    __swig_getmethods__["index_first"] = _fts_run_log.FtsRunLogRecord_index_first_get
    if _newclass:
        index_first = _swig_property(_fts_run_log.FtsRunLogRecord_index_first_get, _fts_run_log.FtsRunLogRecord_index_first_set)
    __swig_setmethods__["index_last"] = _fts_run_log.FtsRunLogRecord_index_last_set
    __swig_getmethods__["index_last"] = _fts_run_log.FtsRunLogRecord_index_last_get
    if _newclass:
        index_last = _swig_property(_fts_run_log.FtsRunLogRecord_index_last_get, _fts_run_log.FtsRunLogRecord_index_last_set)
    __swig_setmethods__["spacing_raw_spectrum"] = _fts_run_log.FtsRunLogRecord_spacing_raw_spectrum_set
    __swig_getmethods__["spacing_raw_spectrum"] = _fts_run_log.FtsRunLogRecord_spacing_raw_spectrum_get
    if _newclass:
        spacing_raw_spectrum = _swig_property(_fts_run_log.FtsRunLogRecord_spacing_raw_spectrum_get, _fts_run_log.FtsRunLogRecord_spacing_raw_spectrum_set)
    __swig_setmethods__["length_attached_header"] = _fts_run_log.FtsRunLogRecord_length_attached_header_set
    __swig_getmethods__["length_attached_header"] = _fts_run_log.FtsRunLogRecord_length_attached_header_get
    if _newclass:
        length_attached_header = _swig_property(_fts_run_log.FtsRunLogRecord_length_attached_header_get, _fts_run_log.FtsRunLogRecord_length_attached_header_set)
    __swig_setmethods__["byte_per_word"] = _fts_run_log.FtsRunLogRecord_byte_per_word_set
    __swig_getmethods__["byte_per_word"] = _fts_run_log.FtsRunLogRecord_byte_per_word_get
    if _newclass:
        byte_per_word = _swig_property(_fts_run_log.FtsRunLogRecord_byte_per_word_get, _fts_run_log.FtsRunLogRecord_byte_per_word_set)
    __swig_setmethods__["zero_level_offset"] = _fts_run_log.FtsRunLogRecord_zero_level_offset_set
    __swig_getmethods__["zero_level_offset"] = _fts_run_log.FtsRunLogRecord_zero_level_offset_get
    if _newclass:
        zero_level_offset = _swig_property(_fts_run_log.FtsRunLogRecord_zero_level_offset_get, _fts_run_log.FtsRunLogRecord_zero_level_offset_set)
    __swig_setmethods__["snr"] = _fts_run_log.FtsRunLogRecord_snr_set
    __swig_getmethods__["snr"] = _fts_run_log.FtsRunLogRecord_snr_get
    if _newclass:
        snr = _swig_property(_fts_run_log.FtsRunLogRecord_snr_get, _fts_run_log.FtsRunLogRecord_snr_set)
    __swig_setmethods__["apodization_function"] = _fts_run_log.FtsRunLogRecord_apodization_function_set
    __swig_getmethods__["apodization_function"] = _fts_run_log.FtsRunLogRecord_apodization_function_get
    if _newclass:
        apodization_function = _swig_property(_fts_run_log.FtsRunLogRecord_apodization_function_get, _fts_run_log.FtsRunLogRecord_apodization_function_set)
    __swig_setmethods__["inside_temperature"] = _fts_run_log.FtsRunLogRecord_inside_temperature_set
    __swig_getmethods__["inside_temperature"] = _fts_run_log.FtsRunLogRecord_inside_temperature_get
    if _newclass:
        inside_temperature = _swig_property(_fts_run_log.FtsRunLogRecord_inside_temperature_get, _fts_run_log.FtsRunLogRecord_inside_temperature_set)
    __swig_setmethods__["inside_pressure"] = _fts_run_log.FtsRunLogRecord_inside_pressure_set
    __swig_getmethods__["inside_pressure"] = _fts_run_log.FtsRunLogRecord_inside_pressure_get
    if _newclass:
        inside_pressure = _swig_property(_fts_run_log.FtsRunLogRecord_inside_pressure_get, _fts_run_log.FtsRunLogRecord_inside_pressure_set)
    __swig_setmethods__["inside_humidity"] = _fts_run_log.FtsRunLogRecord_inside_humidity_set
    __swig_getmethods__["inside_humidity"] = _fts_run_log.FtsRunLogRecord_inside_humidity_get
    if _newclass:
        inside_humidity = _swig_property(_fts_run_log.FtsRunLogRecord_inside_humidity_get, _fts_run_log.FtsRunLogRecord_inside_humidity_set)
    __swig_setmethods__["outside_temperature"] = _fts_run_log.FtsRunLogRecord_outside_temperature_set
    __swig_getmethods__["outside_temperature"] = _fts_run_log.FtsRunLogRecord_outside_temperature_get
    if _newclass:
        outside_temperature = _swig_property(_fts_run_log.FtsRunLogRecord_outside_temperature_get, _fts_run_log.FtsRunLogRecord_outside_temperature_set)
    __swig_setmethods__["outside_pressure"] = _fts_run_log.FtsRunLogRecord_outside_pressure_set
    __swig_getmethods__["outside_pressure"] = _fts_run_log.FtsRunLogRecord_outside_pressure_get
    if _newclass:
        outside_pressure = _swig_property(_fts_run_log.FtsRunLogRecord_outside_pressure_get, _fts_run_log.FtsRunLogRecord_outside_pressure_set)
    __swig_setmethods__["outside_humidity"] = _fts_run_log.FtsRunLogRecord_outside_humidity_set
    __swig_getmethods__["outside_humidity"] = _fts_run_log.FtsRunLogRecord_outside_humidity_get
    if _newclass:
        outside_humidity = _swig_property(_fts_run_log.FtsRunLogRecord_outside_humidity_get, _fts_run_log.FtsRunLogRecord_outside_humidity_set)
    __swig_setmethods__["solar_intensity_average"] = _fts_run_log.FtsRunLogRecord_solar_intensity_average_set
    __swig_getmethods__["solar_intensity_average"] = _fts_run_log.FtsRunLogRecord_solar_intensity_average_get
    if _newclass:
        solar_intensity_average = _swig_property(_fts_run_log.FtsRunLogRecord_solar_intensity_average_get, _fts_run_log.FtsRunLogRecord_solar_intensity_average_set)
    __swig_setmethods__["fractional_variation_solar_intensity"] = _fts_run_log.FtsRunLogRecord_fractional_variation_solar_intensity_set
    __swig_getmethods__["fractional_variation_solar_intensity"] = _fts_run_log.FtsRunLogRecord_fractional_variation_solar_intensity_get
    if _newclass:
        fractional_variation_solar_intensity = _swig_property(_fts_run_log.FtsRunLogRecord_fractional_variation_solar_intensity_get, _fts_run_log.FtsRunLogRecord_fractional_variation_solar_intensity_set)
    __swig_setmethods__["wind_speed"] = _fts_run_log.FtsRunLogRecord_wind_speed_set
    __swig_getmethods__["wind_speed"] = _fts_run_log.FtsRunLogRecord_wind_speed_get
    if _newclass:
        wind_speed = _swig_property(_fts_run_log.FtsRunLogRecord_wind_speed_get, _fts_run_log.FtsRunLogRecord_wind_speed_set)
    __swig_setmethods__["wind_direction"] = _fts_run_log.FtsRunLogRecord_wind_direction_set
    __swig_getmethods__["wind_direction"] = _fts_run_log.FtsRunLogRecord_wind_direction_get
    if _newclass:
        wind_direction = _swig_property(_fts_run_log.FtsRunLogRecord_wind_direction_get, _fts_run_log.FtsRunLogRecord_wind_direction_set)
    __swig_setmethods__["laser_frequency"] = _fts_run_log.FtsRunLogRecord_laser_frequency_set
    __swig_getmethods__["laser_frequency"] = _fts_run_log.FtsRunLogRecord_laser_frequency_get
    if _newclass:
        laser_frequency = _swig_property(_fts_run_log.FtsRunLogRecord_laser_frequency_get, _fts_run_log.FtsRunLogRecord_laser_frequency_set)
    __swig_setmethods__["sun_tracker_frequency"] = _fts_run_log.FtsRunLogRecord_sun_tracker_frequency_set
    __swig_getmethods__["sun_tracker_frequency"] = _fts_run_log.FtsRunLogRecord_sun_tracker_frequency_get
    if _newclass:
        sun_tracker_frequency = _swig_property(_fts_run_log.FtsRunLogRecord_sun_tracker_frequency_get, _fts_run_log.FtsRunLogRecord_sun_tracker_frequency_set)
    __swig_setmethods__["airmass_independent_path_length"] = _fts_run_log.FtsRunLogRecord_airmass_independent_path_length_set
    __swig_getmethods__["airmass_independent_path_length"] = _fts_run_log.FtsRunLogRecord_airmass_independent_path_length_get
    if _newclass:
        airmass_independent_path_length = _swig_property(_fts_run_log.FtsRunLogRecord_airmass_independent_path_length_get, _fts_run_log.FtsRunLogRecord_airmass_independent_path_length_set)
    __swig_setmethods__["spectrum_index"] = _fts_run_log.FtsRunLogRecord_spectrum_index_set
    __swig_getmethods__["spectrum_index"] = _fts_run_log.FtsRunLogRecord_spectrum_index_get
    if _newclass:
        spectrum_index = _swig_property(_fts_run_log.FtsRunLogRecord_spectrum_index_get, _fts_run_log.FtsRunLogRecord_spectrum_index_set)

    def __init__(self):
        """

        FullPhysics::FtsRunLogRecord::FtsRunLogRecord()
        Initializes all the records to a sane default. 
        """
        this = _fts_run_log.new_FtsRunLogRecord()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _fts_run_log.delete_FtsRunLogRecord
    __del__ = lambda self: None
FtsRunLogRecord_swigregister = _fts_run_log.FtsRunLogRecord_swigregister
FtsRunLogRecord_swigregister(FtsRunLogRecord)

class FtsRunLog(full_physics_swig.generic_object.GenericObject):
    """

    This reads a FTS run log file.

    This is just a simple text file, this class handles reading this data.

    There are two different types of run logs, either space delimited or
    tab delimited. We currently only support the space delimited (support
    for tab delimited would really just require adding unit test data, it
    isn't all that different from the space delimited).

    There are also several formats for the space delimited files, which
    vary depending on the size of the a line. We only read the latest
    "New GDS-format", which has a line length of 300.

    C++ includes: fts_run_log.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FtsRunLog, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FtsRunLog, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        FullPhysics::FtsRunLog::FtsRunLog(const HdfFile &Hfile, const std::string &Group_name, const
        std::vector< std::string > &Band_names)

        """
        this = _fts_run_log.new_FtsRunLog(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def read(self, spectrum_name):
        """

        const FtsRunLogRecord& FullPhysics::FtsRunLog::read(const std::string &spectrum_name) const

        """
        return _fts_run_log.FtsRunLog_read(self, spectrum_name)

    __swig_destroy__ = _fts_run_log.delete_FtsRunLog
    __del__ = lambda self: None
FtsRunLog_swigregister = _fts_run_log.FtsRunLog_swigregister
FtsRunLog_swigregister(FtsRunLog)

# This file is compatible with both classic and new-style classes.


