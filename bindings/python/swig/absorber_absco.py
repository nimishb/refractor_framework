# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_absorber_absco', [dirname(__file__)])
        except ImportError:
            import _absorber_absco
            return _absorber_absco
        if fp is not None:
            try:
                _mod = imp.load_module('_absorber_absco', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _absorber_absco = swig_import_helper()
    del swig_import_helper
else:
    import _absorber_absco
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_absorber_absco.SHARED_PTR_DISOWN_swigconstant(_absorber_absco)
SHARED_PTR_DISOWN = _absorber_absco.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.pressure
import full_physics_swig.state_vector
import full_physics_swig.generic_object
import full_physics_swig.temperature
import full_physics_swig.absorber_vmr
import full_physics_swig.altitude
import full_physics_swig.absorber
class AbsorberAbsco(full_physics_swig.absorber.Absorber, full_physics_swig.absorber_vmr.ObserverAbsorberVmr, full_physics_swig.pressure.ObserverPressure, full_physics_swig.temperature.ObserverTemperature, full_physics_swig.altitude.ObserverAltitude):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.absorber.Absorber, full_physics_swig.absorber_vmr.ObserverAbsorberVmr, full_physics_swig.pressure.ObserverPressure, full_physics_swig.temperature.ObserverTemperature, full_physics_swig.altitude.ObserverAltitude]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsorberAbsco, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.absorber.Absorber, full_physics_swig.absorber_vmr.ObserverAbsorberVmr, full_physics_swig.pressure.ObserverPressure, full_physics_swig.temperature.ObserverTemperature, full_physics_swig.altitude.ObserverAltitude]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbsorberAbsco, name)
    __repr__ = _swig_repr

    def __init__(self, Vmr, Press, Temp, Alt, Gas_absorption, C, Nsub=10):
        this = _absorber_absco.new_AbsorberAbsco(Vmr, Press, Temp, Alt, Gas_absorption, C, Nsub)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def integrand_independent_wn(self, Spec_index, Species_index, P):
        return _absorber_absco.AbsorberAbsco_integrand_independent_wn(self, Spec_index, Species_index, P)

    def integrand(self, wn, p, Spec_index, Species_index):
        return _absorber_absco.AbsorberAbsco_integrand(self, wn, p, Spec_index, Species_index)

    def optical_depth_each_layer_direct_integrate(self, *args):
        return _absorber_absco.AbsorberAbsco_optical_depth_each_layer_direct_integrate(self, *args)

    def notify_add(self, Sv):
        return _absorber_absco.AbsorberAbsco_notify_add(self, Sv)

    def notify_remove(self, Sv):
        return _absorber_absco.AbsorberAbsco_notify_remove(self, Sv)

    def _v_number_species(self):
        return _absorber_absco.AbsorberAbsco__v_number_species(self)

    def _v_number_spectrometer(self):
        return _absorber_absco.AbsorberAbsco__v_number_spectrometer(self)

    def _v_number_layer(self):
        return _absorber_absco.AbsorberAbsco__v_number_layer(self)

    def gas_name(self, Species_index):
        return _absorber_absco.AbsorberAbsco_gas_name(self, Species_index)

    def notify_update(self, *args):
        return _absorber_absco.AbsorberAbsco_notify_update(self, *args)

    def optical_depth_each_layer(self, wn, spec_index):
        return _absorber_absco.AbsorberAbsco_optical_depth_each_layer(self, wn, spec_index)

    def _v_specific_humidity_layer(self):
        return _absorber_absco.AbsorberAbsco__v_specific_humidity_layer(self)

    @property
    def specific_humidity_layer(self):
        return self._v_specific_humidity_layer()


    def _v_dry_air_molecular_density_layer(self):
        return _absorber_absco.AbsorberAbsco__v_dry_air_molecular_density_layer(self)

    @property
    def dry_air_molecular_density_layer(self):
        return self._v_dry_air_molecular_density_layer()


    def _v_dry_air_column_thickness_layer(self):
        return _absorber_absco.AbsorberAbsco__v_dry_air_column_thickness_layer(self)

    @property
    def dry_air_column_thickness_layer(self):
        return self._v_dry_air_column_thickness_layer()


    def _v_wet_air_column_thickness_layer(self):
        return _absorber_absco.AbsorberAbsco__v_wet_air_column_thickness_layer(self)

    @property
    def wet_air_column_thickness_layer(self):
        return self._v_wet_air_column_thickness_layer()


    def _v_pressure_weighting_function_layer(self):
        return _absorber_absco.AbsorberAbsco__v_pressure_weighting_function_layer(self)

    @property
    def pressure_weighting_function_layer(self):
        return self._v_pressure_weighting_function_layer()


    def _v_pressure_weighting_function_grid(self):
        return _absorber_absco.AbsorberAbsco__v_pressure_weighting_function_grid(self)

    @property
    def pressure_weighting_function_grid(self):
        return self._v_pressure_weighting_function_grid()


    def gas_column_thickness_layer(self, Gas_name):
        return _absorber_absco.AbsorberAbsco_gas_column_thickness_layer(self, Gas_name)

    def gas_total_column_thickness(self, Gas_name):
        return _absorber_absco.AbsorberAbsco_gas_total_column_thickness(self, Gas_name)

    def xgas(self, Gas_name):
        return _absorber_absco.AbsorberAbsco_xgas(self, Gas_name)

    def average_vmr(self, Gas_name):
        return _absorber_absco.AbsorberAbsco_average_vmr(self, Gas_name)

    def clone(self, *args):
        return _absorber_absco.AbsorberAbsco_clone(self, *args)

    def absorber_vmr(self, gas_name):
        return _absorber_absco.AbsorberAbsco_absorber_vmr(self, gas_name)

    def gas_absorption(self, Gas_name):
        return _absorber_absco.AbsorberAbsco_gas_absorption(self, Gas_name)

    def _v_pressure_sublayer(self):
        return _absorber_absco.AbsorberAbsco__v_pressure_sublayer(self)

    @property
    def pressure_sublayer(self):
        return self._v_pressure_sublayer()


    def _v_temperature_sublayer(self):
        return _absorber_absco.AbsorberAbsco__v_temperature_sublayer(self)

    @property
    def temperature_sublayer(self):
        return self._v_temperature_sublayer()


    def _v_h2o_vmr_sublayer(self):
        return _absorber_absco.AbsorberAbsco__v_h2o_vmr_sublayer(self)

    @property
    def h2o_vmr_sublayer(self):
        return self._v_h2o_vmr_sublayer()


    def vmr_sublayer(self, Gas_name):
        return _absorber_absco.AbsorberAbsco_vmr_sublayer(self, Gas_name)

    def gravity_sublayer(self, Spec_index):
        return _absorber_absco.AbsorberAbsco_gravity_sublayer(self, Spec_index)
    __swig_destroy__ = _absorber_absco.delete_AbsorberAbsco
    __del__ = lambda self: None
AbsorberAbsco_swigregister = _absorber_absco.AbsorberAbsco_swigregister
AbsorberAbsco_swigregister(AbsorberAbsco)

# This file is compatible with both classic and new-style classes.


