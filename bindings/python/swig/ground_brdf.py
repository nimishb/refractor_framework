# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ground_brdf', [dirname(__file__)])
        except ImportError:
            import _ground_brdf
            return _ground_brdf
        if fp is not None:
            try:
                _mod = imp.load_module('_ground_brdf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ground_brdf = swig_import_helper()
    del swig_import_helper
else:
    import _ground_brdf
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_ground_brdf.SHARED_PTR_DISOWN_swigconstant(_ground_brdf)
SHARED_PTR_DISOWN = _ground_brdf.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.ground
import full_physics_swig.observer
import full_physics_swig.generic_object
import full_physics_swig.state_vector
import full_physics_swig.array_with_unit
import full_physics_swig.double_with_unit
class GroundBrdfVeg(full_physics_swig.ground.Ground):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.ground.Ground]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroundBrdfVeg, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.ground.Ground]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroundBrdfVeg, name)
    __repr__ = _swig_repr

    def __init__(self, Coeffs, Flag, Ref_points, Desc_band_names):
        this = _ground_brdf.new_GroundBrdfVeg(Coeffs, Flag, Ref_points, Desc_band_names)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def surface_parameter(self, wn, spec_index):
        return _ground_brdf.GroundBrdfVeg_surface_parameter(self, wn, spec_index)

    def number_spectrometer(self):
        return _ground_brdf.GroundBrdfVeg_number_spectrometer(self)

    def weight(self, wn, spec_index):
        return _ground_brdf.GroundBrdfVeg_weight(self, wn, spec_index)

    def weight_intercept(self, *args):
        return _ground_brdf.GroundBrdfVeg_weight_intercept(self, *args)

    def weight_slope(self, *args):
        return _ground_brdf.GroundBrdfVeg_weight_slope(self, *args)

    def rahman_factor(self, *args):
        return _ground_brdf.GroundBrdfVeg_rahman_factor(self, *args)

    def overall_amplitude(self, *args):
        return _ground_brdf.GroundBrdfVeg_overall_amplitude(self, *args)

    def asymmetry_parameter(self, *args):
        return _ground_brdf.GroundBrdfVeg_asymmetry_parameter(self, *args)

    def geometric_factor(self, *args):
        return _ground_brdf.GroundBrdfVeg_geometric_factor(self, *args)

    def breon_factor(self, *args):
        return _ground_brdf.GroundBrdfVeg_breon_factor(self, *args)

    def brdf_covariance(self, spec_index):
        return _ground_brdf.GroundBrdfVeg_brdf_covariance(self, spec_index)

    def refractive_index(self, Spec_idx):
        return _ground_brdf.GroundBrdfVeg_refractive_index(self, Spec_idx)

    def black_sky_albedo(self, Spec_index, Sza):
        return _ground_brdf.GroundBrdfVeg_black_sky_albedo(self, Spec_index, Sza)

    def albedo(self, Spec_index, Sza, Vza, Azm, Stokes_coef):
        return _ground_brdf.GroundBrdfVeg_albedo(self, Spec_index, Sza, Vza, Azm, Stokes_coef)

    def breon_type(self):
        return _ground_brdf.GroundBrdfVeg_breon_type(self)

    def reference_point(self, spec_index):
        return _ground_brdf.GroundBrdfVeg_reference_point(self, spec_index)

    def clone(self):
        return _ground_brdf.GroundBrdfVeg_clone(self)

    def state_vector_name_i(self, i):
        return _ground_brdf.GroundBrdfVeg_state_vector_name_i(self, i)

    def print_desc(self, Os):
        return _ground_brdf.GroundBrdfVeg_print_desc(self, Os)

    def desc(self):
        return _ground_brdf.GroundBrdfVeg_desc(self)
    __swig_destroy__ = _ground_brdf.delete_GroundBrdfVeg
    __del__ = lambda self: None
GroundBrdfVeg_swigregister = _ground_brdf.GroundBrdfVeg_swigregister
GroundBrdfVeg_swigregister(GroundBrdfVeg)

class GroundBrdfSoil(full_physics_swig.ground.Ground):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.ground.Ground]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroundBrdfSoil, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.ground.Ground]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroundBrdfSoil, name)
    __repr__ = _swig_repr

    def __init__(self, Coeffs, Flag, Ref_points, Desc_band_names):
        this = _ground_brdf.new_GroundBrdfSoil(Coeffs, Flag, Ref_points, Desc_band_names)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def surface_parameter(self, wn, spec_index):
        return _ground_brdf.GroundBrdfSoil_surface_parameter(self, wn, spec_index)

    def number_spectrometer(self):
        return _ground_brdf.GroundBrdfSoil_number_spectrometer(self)

    def weight(self, wn, spec_index):
        return _ground_brdf.GroundBrdfSoil_weight(self, wn, spec_index)

    def weight_intercept(self, *args):
        return _ground_brdf.GroundBrdfSoil_weight_intercept(self, *args)

    def weight_slope(self, *args):
        return _ground_brdf.GroundBrdfSoil_weight_slope(self, *args)

    def rahman_factor(self, *args):
        return _ground_brdf.GroundBrdfSoil_rahman_factor(self, *args)

    def overall_amplitude(self, *args):
        return _ground_brdf.GroundBrdfSoil_overall_amplitude(self, *args)

    def asymmetry_parameter(self, *args):
        return _ground_brdf.GroundBrdfSoil_asymmetry_parameter(self, *args)

    def geometric_factor(self, *args):
        return _ground_brdf.GroundBrdfSoil_geometric_factor(self, *args)

    def breon_factor(self, *args):
        return _ground_brdf.GroundBrdfSoil_breon_factor(self, *args)

    def brdf_covariance(self, spec_index):
        return _ground_brdf.GroundBrdfSoil_brdf_covariance(self, spec_index)

    def refractive_index(self, Spec_idx):
        return _ground_brdf.GroundBrdfSoil_refractive_index(self, Spec_idx)

    def black_sky_albedo(self, Spec_index, Sza):
        return _ground_brdf.GroundBrdfSoil_black_sky_albedo(self, Spec_index, Sza)

    def albedo(self, Spec_index, Sza, Vza, Azm, Stokes_coef):
        return _ground_brdf.GroundBrdfSoil_albedo(self, Spec_index, Sza, Vza, Azm, Stokes_coef)

    def breon_type(self):
        return _ground_brdf.GroundBrdfSoil_breon_type(self)

    def reference_point(self, spec_index):
        return _ground_brdf.GroundBrdfSoil_reference_point(self, spec_index)

    def clone(self):
        return _ground_brdf.GroundBrdfSoil_clone(self)

    def state_vector_name_i(self, i):
        return _ground_brdf.GroundBrdfSoil_state_vector_name_i(self, i)

    def print_desc(self, Os):
        return _ground_brdf.GroundBrdfSoil_print_desc(self, Os)

    def desc(self):
        return _ground_brdf.GroundBrdfSoil_desc(self)
    __swig_destroy__ = _ground_brdf.delete_GroundBrdfSoil
    __del__ = lambda self: None
GroundBrdfSoil_swigregister = _ground_brdf.GroundBrdfSoil_swigregister
GroundBrdfSoil_swigregister(GroundBrdfSoil)

# This file is compatible with both classic and new-style classes.


