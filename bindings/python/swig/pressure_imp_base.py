# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pressure_imp_base', [dirname(__file__)])
        except ImportError:
            import _pressure_imp_base
            return _pressure_imp_base
        if fp is not None:
            try:
                _mod = imp.load_module('_pressure_imp_base', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pressure_imp_base = swig_import_helper()
    del swig_import_helper
else:
    import _pressure_imp_base
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_pressure_imp_base.SHARED_PTR_DISOWN_swigconstant(_pressure_imp_base)
SHARED_PTR_DISOWN = _pressure_imp_base.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.pressure
import full_physics_swig.state_vector
import full_physics_swig.generic_object
class SubStateVectorArrayPressure(full_physics_swig.pressure.Pressure, full_physics_swig.state_vector.SubStateVectorObserver):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.pressure.Pressure, full_physics_swig.state_vector.SubStateVectorObserver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubStateVectorArrayPressure, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.pressure.Pressure, full_physics_swig.state_vector.SubStateVectorObserver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubStateVectorArrayPressure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, *args):
        return _pressure_imp_base.SubStateVectorArrayPressure_init(self, *args)
    __swig_destroy__ = _pressure_imp_base.delete_SubStateVectorArrayPressure
    __del__ = lambda self: None

    def mark_used_sub(self, Used):
        return _pressure_imp_base.SubStateVectorArrayPressure_mark_used_sub(self, Used)

    def state_vector_name_i(self, i):
        return _pressure_imp_base.SubStateVectorArrayPressure_state_vector_name_i(self, i)

    def state_vector_name_sub(self, Sv_name):
        return _pressure_imp_base.SubStateVectorArrayPressure_state_vector_name_sub(self, Sv_name)

    def update_sub_state(self, Sv_sub, Cov):
        return _pressure_imp_base.SubStateVectorArrayPressure_update_sub_state(self, Sv_sub, Cov)

    def update_sub_state_hook(self):
        return _pressure_imp_base.SubStateVectorArrayPressure_update_sub_state_hook(self)

    def _v_coefficient(self):
        return _pressure_imp_base.SubStateVectorArrayPressure__v_coefficient(self)

    @property
    def coefficient(self):
        return self._v_coefficient()


    def _v_used_flag_value(self):
        return _pressure_imp_base.SubStateVectorArrayPressure__v_used_flag_value(self)

    @property
    def used_flag_value(self):
        return self._v_used_flag_value()


    def _v_statevector_covariance(self):
        return _pressure_imp_base.SubStateVectorArrayPressure__v_statevector_covariance(self)

    @property
    def statevector_covariance(self):
        return self._v_statevector_covariance()


    def _v_pressure(self):
        return _pressure_imp_base.SubStateVectorArrayPressure__v_pressure(self)

    @property
    def pressure(self):
        return self._v_pressure()

SubStateVectorArrayPressure_swigregister = _pressure_imp_base.SubStateVectorArrayPressure_swigregister
SubStateVectorArrayPressure_swigregister(SubStateVectorArrayPressure)

class PressureImpBase(SubStateVectorArrayPressure):
    """

    As a design principle, we have each base class with the absolutely
    minimum interface needed for use from the rest of the system.

    This allows us to support any future code that supports this minimum
    interface.

    However, almost always you will want to derive from this class
    instead. This provides additional functionality that you will almost
    always want. We support have a subset set of the full StateVector
    provide coefficients for this class, as well as caching the
    calculation of the pressure levels so we only do the calculation when
    something has changed (e.g., the StateVector).

    The more general Pressure interface can be used to support unusual
    cases that don't match this implementation, for example wrapping an
    existing third party library that doesn't mesh with how
    PressureImpBase sets things up. But most of the time, you'll want to
    derive from this class.

    C++ includes: pressure_imp_base.h 
    """

    __swig_setmethods__ = {}
    for _s in [SubStateVectorArrayPressure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PressureImpBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SubStateVectorArrayPressure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PressureImpBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pressure_imp_base.delete_PressureImpBase
    __del__ = lambda self: None

    def clone(self):
        """

        virtual boost::shared_ptr<Pressure> FullPhysics::PressureImpBase::clone() const =0

        """
        return _pressure_imp_base.PressureImpBase_clone(self)


    def _v_pressure_grid(self):
        """

        virtual ArrayAdWithUnit<double, 1> FullPhysics::PressureImpBase::pressure_grid() const

        """
        return _pressure_imp_base.PressureImpBase__v_pressure_grid(self)


    def add_observer(self, Obs):
        return _pressure_imp_base.PressureImpBase_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _pressure_imp_base.PressureImpBase_remove_observer(self, Obs)

    def update_sub_state_hook(self):
        """

        virtual void FullPhysics::PressureImpBase::update_sub_state_hook()

        """
        return _pressure_imp_base.PressureImpBase_update_sub_state_hook(self)


    def print_desc(self, Os):
        """

        virtual void FullPhysics::PressureImpBase::print(std::ostream &Os) const
        Print to stream.

        The default calls the function "desc" that returns a string. This
        gives cleaner interface for deriving from this class in python, but
        most C++ classes will want to override this function rather than using
        desc. 
        """
        return _pressure_imp_base.PressureImpBase_print_desc(self, Os)


    def _v_desc(self):
        """

        virtual std::string FullPhysics::PressureImpBase::desc() const
        Description of object, to be printed to stream.

        This gives a cleaner interface for deriving from python. 
        """
        return _pressure_imp_base.PressureImpBase__v_desc(self)


    @property
    def desc(self):
        return self._v_desc()


    def mark_used(self, Sv, Used):
        return _pressure_imp_base.PressureImpBase_mark_used(self, Sv, Used)

    def state_vector_name(self, Sv, Sv_name):
        return _pressure_imp_base.PressureImpBase_state_vector_name(self, Sv, Sv_name)

    def notify_update(self, Observed_object):
        return _pressure_imp_base.PressureImpBase_notify_update(self, Observed_object)

    def notify_add(self, Observed_object):
        return _pressure_imp_base.PressureImpBase_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _pressure_imp_base.PressureImpBase_notify_remove(self, Observed_object)

    def update_sub_state(self, Sv_sub, Cov_sub):
        return _pressure_imp_base.PressureImpBase_update_sub_state(self, Sv_sub, Cov_sub)

    def state_vector_name_i(self, i):
        return _pressure_imp_base.PressureImpBase_state_vector_name_i(self, i)

    def state_vector_name_sub(self, Sv_name):
        return _pressure_imp_base.PressureImpBase_state_vector_name_sub(self, Sv_name)
    __swig_setmethods__["cache_stale"] = _pressure_imp_base.PressureImpBase_cache_stale_set
    __swig_getmethods__["cache_stale"] = _pressure_imp_base.PressureImpBase_cache_stale_get
    if _newclass:
        cache_stale = _swig_property(_pressure_imp_base.PressureImpBase_cache_stale_get, _pressure_imp_base.PressureImpBase_cache_stale_set)
    __swig_setmethods__["pgrid"] = _pressure_imp_base.PressureImpBase_pgrid_set
    __swig_getmethods__["pgrid"] = _pressure_imp_base.PressureImpBase_pgrid_get
    if _newclass:
        pgrid = _swig_property(_pressure_imp_base.PressureImpBase_pgrid_get, _pressure_imp_base.PressureImpBase_pgrid_set)

    def calc_pressure_grid(self):
        return _pressure_imp_base.PressureImpBase_calc_pressure_grid(self)

    def __init__(self, *args):
        if self.__class__ == PressureImpBase:
            _self = None
        else:
            _self = self
        this = _pressure_imp_base.new_PressureImpBase(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pressure_imp_base.disown_PressureImpBase(self)
        return weakref_proxy(self)
PressureImpBase_swigregister = _pressure_imp_base.PressureImpBase_swigregister
PressureImpBase_swigregister(PressureImpBase)

# This file is compatible with both classic and new-style classes.


