# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_aerosol_extinction_imp_base', [dirname(__file__)])
        except ImportError:
            import _aerosol_extinction_imp_base
            return _aerosol_extinction_imp_base
        if fp is not None:
            try:
                _mod = imp.load_module('_aerosol_extinction_imp_base', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _aerosol_extinction_imp_base = swig_import_helper()
    del swig_import_helper
else:
    import _aerosol_extinction_imp_base
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_aerosol_extinction_imp_base.SHARED_PTR_DISOWN_swigconstant(_aerosol_extinction_imp_base)
SHARED_PTR_DISOWN = _aerosol_extinction_imp_base.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.aerosol_extinction
import full_physics_swig.observer
import full_physics_swig.generic_object
import full_physics_swig.state_vector
import full_physics_swig.sub_state_vector_array
class SubStateVectorArrayAerosolExtinction(full_physics_swig.aerosol_extinction.AerosolExtinction, full_physics_swig.state_vector.SubStateVectorObserver):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.aerosol_extinction.AerosolExtinction, full_physics_swig.state_vector.SubStateVectorObserver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubStateVectorArrayAerosolExtinction, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.aerosol_extinction.AerosolExtinction, full_physics_swig.state_vector.SubStateVectorObserver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubStateVectorArrayAerosolExtinction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, *args):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction_init(self, *args)
    __swig_destroy__ = _aerosol_extinction_imp_base.delete_SubStateVectorArrayAerosolExtinction
    __del__ = lambda self: None

    def mark_used_sub(self, Used):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction_mark_used_sub(self, Used)

    def state_vector_name_i(self, i):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction_state_vector_name_i(self, i)

    def state_vector_name_sub(self, Sv_name):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction_state_vector_name_sub(self, Sv_name)

    def update_sub_state(self, Sv_sub, Cov):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction_update_sub_state(self, Sv_sub, Cov)

    def update_sub_state_hook(self):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction_update_sub_state_hook(self)

    def _v_coefficient(self):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction__v_coefficient(self)

    @property
    def coefficient(self):
        return self._v_coefficient()


    def _v_used_flag_value(self):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction__v_used_flag_value(self)

    @property
    def used_flag_value(self):
        return self._v_used_flag_value()


    def _v_statevector_covariance(self):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction__v_statevector_covariance(self)

    @property
    def statevector_covariance(self):
        return self._v_statevector_covariance()


    def _v_pressure(self):
        return _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction__v_pressure(self)

    @property
    def pressure(self):
        return self._v_pressure()

SubStateVectorArrayAerosolExtinction_swigregister = _aerosol_extinction_imp_base.SubStateVectorArrayAerosolExtinction_swigregister
SubStateVectorArrayAerosolExtinction_swigregister(SubStateVectorArrayAerosolExtinction)

class AerosolExtinctionImpBase(SubStateVectorArrayAerosolExtinction):
    """

    As a design principle, we have each base class with the absolutely
    minimum interface needed for use from the rest of the system.

    This allows us to support any future code that supports this minimum
    interface.

    However, almost always you will want to derive from this class
    instead. See PressureImpBase for a more complete discussion of this.

    C++ includes: aerosol_extinction_imp_base.h 
    """

    __swig_setmethods__ = {}
    for _s in [SubStateVectorArrayAerosolExtinction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AerosolExtinctionImpBase, name, value)
    __swig_getmethods__ = {}
    for _s in [SubStateVectorArrayAerosolExtinction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AerosolExtinctionImpBase, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _aerosol_extinction_imp_base.delete_AerosolExtinctionImpBase
    __del__ = lambda self: None

    def clone(self, *args):
        """

        virtual boost::shared_ptr<AerosolExtinction> FullPhysics::AerosolExtinctionImpBase::clone(const boost::shared_ptr< Pressure > &Press) const =0

        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_clone(self, *args)


    def extinction_for_layer(self, i):
        """

        virtual AutoDerivative<double> FullPhysics::AerosolExtinctionImpBase::extinction_for_layer(int i) const

        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_extinction_for_layer(self, i)


    def _v_aerosol_name(self):
        """

        virtual std::string FullPhysics::AerosolExtinctionImpBase::aerosol_name() const

        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase__v_aerosol_name(self)


    @property
    def aerosol_name(self):
        return self._v_aerosol_name()


    def _v_aerosol_extinction(self):
        """

        virtual ArrayAd<double, 1> FullPhysics::AerosolExtinctionImpBase::aerosol_extinction() const

        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase__v_aerosol_extinction(self)


    @property
    def aerosol_extinction(self):
        return self._v_aerosol_extinction()


    def _v_model_short_name(self):
        """

        virtual std::string FullPhysics::AerosolExtinctionImpBase::model_short_name() const =0
        A short name representing the type of extinction model being
        implemented. 
        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase__v_model_short_name(self)


    @property
    def model_short_name(self):
        return self._v_model_short_name()


    def add_observer(self, Obs):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_remove_observer(self, Obs)

    def update_sub_state_hook(self):
        """

        virtual void FullPhysics::AerosolExtinctionImpBase::update_sub_state_hook()

        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_update_sub_state_hook(self)


    def print_desc(self, Os):
        """

        virtual void FullPhysics::AerosolExtinctionImpBase::print(std::ostream &Os) const
        Print to stream.

        The default calls the function "desc" that returns a string. This
        gives cleaner interface for deriving from this class in python, but
        most C++ classes will want to override this function rather than using
        desc. 
        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_print_desc(self, Os)


    def _v_desc(self):
        """

        virtual std::string FullPhysics::AerosolExtinctionImpBase::desc() const
        Description of object, to be printed to stream.

        This gives a cleaner interface for deriving from python. 
        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase__v_desc(self)


    @property
    def desc(self):
        return self._v_desc()


    def mark_used(self, Sv, Used):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_mark_used(self, Sv, Used)

    def state_vector_name(self, Sv, Sv_name):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_state_vector_name(self, Sv, Sv_name)

    def notify_update(self, Observed_object):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_notify_update(self, Observed_object)

    def notify_add(self, Observed_object):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_notify_remove(self, Observed_object)

    def update_sub_state(self, Sv_sub, Cov_sub):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_update_sub_state(self, Sv_sub, Cov_sub)

    def state_vector_name_i(self, i):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_state_vector_name_i(self, i)

    def state_vector_name_sub(self, Sv_name):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_state_vector_name_sub(self, Sv_name)

    def _v_aerosol_parameter(self):
        """

        blitz::Array<double, 1> FullPhysics::AerosolExtinctionImpBase::aerosol_parameter() const
        Returns the value of the coefficients used to generate the aerosol
        extinction. 
        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase__v_aerosol_parameter(self)


    @property
    def aerosol_parameter(self):
        return self._v_aerosol_parameter()


    def _v_aerosol_parameter_uncertainty(self):
        """

        blitz::Array<double, 1> FullPhysics::AerosolExtinctionImpBase::aerosol_parameter_uncertainty() const
        Returns the uncertainty of the aerosol type coefficients. 
        """
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase__v_aerosol_parameter_uncertainty(self)


    @property
    def aerosol_parameter_uncertainty(self):
        return self._v_aerosol_parameter_uncertainty()

    __swig_setmethods__["cache_stale"] = _aerosol_extinction_imp_base.AerosolExtinctionImpBase_cache_stale_set
    __swig_getmethods__["cache_stale"] = _aerosol_extinction_imp_base.AerosolExtinctionImpBase_cache_stale_get
    if _newclass:
        cache_stale = _swig_property(_aerosol_extinction_imp_base.AerosolExtinctionImpBase_cache_stale_get, _aerosol_extinction_imp_base.AerosolExtinctionImpBase_cache_stale_set)
    __swig_setmethods__["aext"] = _aerosol_extinction_imp_base.AerosolExtinctionImpBase_aext_set
    __swig_getmethods__["aext"] = _aerosol_extinction_imp_base.AerosolExtinctionImpBase_aext_get
    if _newclass:
        aext = _swig_property(_aerosol_extinction_imp_base.AerosolExtinctionImpBase_aext_get, _aerosol_extinction_imp_base.AerosolExtinctionImpBase_aext_set)

    def calc_aerosol_extinction(self):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase_calc_aerosol_extinction(self)

    def _v_total_aod(self):
        return _aerosol_extinction_imp_base.AerosolExtinctionImpBase__v_total_aod(self)

    @property
    def total_aod(self):
        return self._v_total_aod()


    def __init__(self, Aerosol_name, Coeff, Used_flag, Press, Mark_according_to_press=True, Pdep_start=0):
        if self.__class__ == AerosolExtinctionImpBase:
            _self = None
        else:
            _self = self
        this = _aerosol_extinction_imp_base.new_AerosolExtinctionImpBase(_self, Aerosol_name, Coeff, Used_flag, Press, Mark_according_to_press, Pdep_start)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _aerosol_extinction_imp_base.disown_AerosolExtinctionImpBase(self)
        return weakref_proxy(self)
AerosolExtinctionImpBase_swigregister = _aerosol_extinction_imp_base.AerosolExtinctionImpBase_swigregister
AerosolExtinctionImpBase_swigregister(AerosolExtinctionImpBase)

# This file is compatible with both classic and new-style classes.


