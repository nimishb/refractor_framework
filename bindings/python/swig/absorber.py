# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_absorber', [dirname(__file__)])
        except ImportError:
            import _absorber
            return _absorber
        if fp is not None:
            try:
                _mod = imp.load_module('_absorber', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _absorber = swig_import_helper()
    del swig_import_helper
else:
    import _absorber
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_absorber.SHARED_PTR_DISOWN_swigconstant(_absorber)
SHARED_PTR_DISOWN = _absorber.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.state_vector
import full_physics_swig.generic_object
class ObservableAbsorber(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObservableAbsorber, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObservableAbsorber, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _absorber.delete_ObservableAbsorber
    __del__ = lambda self: None

    def add_observer_and_keep_reference(self, Obs):
        return _absorber.ObservableAbsorber_add_observer_and_keep_reference(self, Obs)

    def add_observer(self, Obs):
        return _absorber.ObservableAbsorber_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _absorber.ObservableAbsorber_remove_observer(self, Obs)
ObservableAbsorber_swigregister = _absorber.ObservableAbsorber_swigregister
ObservableAbsorber_swigregister(ObservableAbsorber)

class ObserverAbsorber(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObserverAbsorber, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObserverAbsorber, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _absorber.new_ObserverAbsorber()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _absorber.delete_ObserverAbsorber
    __del__ = lambda self: None

    def notify_update(self, Observed_object):
        return _absorber.ObserverAbsorber_notify_update(self, Observed_object)

    def notify_add(self, Observed_object):
        return _absorber.ObserverAbsorber_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _absorber.ObserverAbsorber_notify_remove(self, Observed_object)
ObserverAbsorber_swigregister = _absorber.ObserverAbsorber_swigregister
ObserverAbsorber_swigregister(ObserverAbsorber)

class Absorber(full_physics_swig.state_vector.StateVectorObserver, ObservableAbsorber):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.state_vector.StateVectorObserver, ObservableAbsorber]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Absorber, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.state_vector.StateVectorObserver, ObservableAbsorber]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Absorber, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _absorber.delete_Absorber
    __del__ = lambda self: None

    def add_observer(self, Obs):
        return _absorber.Absorber_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _absorber.Absorber_remove_observer(self, Obs)

    def __str__(self):
        return _absorber.Absorber___str__(self)

    def _v_number_species(self):
        return _absorber.Absorber__v_number_species(self)

    @property
    def number_species(self):
        return self._v_number_species()


    def gas_name(self, Species_index):
        return _absorber.Absorber_gas_name(self, Species_index)

    def gas_index(self, Name):
        return _absorber.Absorber_gas_index(self, Name)

    def optical_depth_each_layer(self, wn, spec_index):
        return _absorber.Absorber_optical_depth_each_layer(self, wn, spec_index)

    def xgas(self, Gas_name):
        return _absorber.Absorber_xgas(self, Gas_name)

    def absorber_vmr(self, gas_name):
        return _absorber.Absorber_absorber_vmr(self, gas_name)

    def clone(self, *args):
        return _absorber.Absorber_clone(self, *args)

    def print_desc(self, Os):
        return _absorber.Absorber_print_desc(self, Os)

    def notify_update(self, Sv):
        return _absorber.Absorber_notify_update(self, Sv)

    def mark_used(self, Sv, Used):
        return _absorber.Absorber_mark_used(self, Sv, Used)

    def state_vector_name(self, Sv, Sv_name):
        return _absorber.Absorber_state_vector_name(self, Sv, Sv_name)

    def notify_add(self, Observed_object):
        return _absorber.Absorber_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _absorber.Absorber_notify_remove(self, Observed_object)

    def __init__(self):
        if self.__class__ == Absorber:
            _self = None
        else:
            _self = self
        this = _absorber.new_Absorber(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _absorber.disown_Absorber(self)
        return weakref_proxy(self)
Absorber_swigregister = _absorber.Absorber_swigregister
Absorber_swigregister(Absorber)

class SubStateVectorAbsorber(Absorber, full_physics_swig.state_vector.SubStateVectorObserver):
    __swig_setmethods__ = {}
    for _s in [Absorber, full_physics_swig.state_vector.SubStateVectorObserver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubStateVectorAbsorber, name, value)
    __swig_getmethods__ = {}
    for _s in [Absorber, full_physics_swig.state_vector.SubStateVectorObserver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubStateVectorAbsorber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == SubStateVectorAbsorber:
            _self = None
        else:
            _self = self
        this = _absorber.new_SubStateVectorAbsorber(_self, *args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _v_number_species(self):
        return _absorber.SubStateVectorAbsorber__v_number_species(self)

    def gas_name(self, Species_index):
        return _absorber.SubStateVectorAbsorber_gas_name(self, Species_index)

    def gas_index(self, Name):
        return _absorber.SubStateVectorAbsorber_gas_index(self, Name)

    def optical_depth_each_layer(self, wn, spec_index):
        return _absorber.SubStateVectorAbsorber_optical_depth_each_layer(self, wn, spec_index)

    def print_desc(self, Os):
        return _absorber.SubStateVectorAbsorber_print_desc(self, Os)

    def add_observer(self, Obs):
        return _absorber.SubStateVectorAbsorber_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _absorber.SubStateVectorAbsorber_remove_observer(self, Obs)

    def clone(self, *args):
        return _absorber.SubStateVectorAbsorber_clone(self, *args)

    def notify_update(self, Sv):
        return _absorber.SubStateVectorAbsorber_notify_update(self, Sv)

    def mark_used(self, Sv, Used):
        return _absorber.SubStateVectorAbsorber_mark_used(self, Sv, Used)

    def state_vector_name(self, Sv, Sv_name):
        return _absorber.SubStateVectorAbsorber_state_vector_name(self, Sv, Sv_name)

    def notify_add(self, Observed_object):
        return _absorber.SubStateVectorAbsorber_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _absorber.SubStateVectorAbsorber_notify_remove(self, Observed_object)

    def init(self, *args):
        return _absorber.SubStateVectorAbsorber_init(self, *args)

    def mark_used_sub(self, Used):
        return _absorber.SubStateVectorAbsorber_mark_used_sub(self, Used)

    def state_vector_name_i(self, i):
        return _absorber.SubStateVectorAbsorber_state_vector_name_i(self, i)

    def state_vector_name_sub(self, Sv_name):
        return _absorber.SubStateVectorAbsorber_state_vector_name_sub(self, Sv_name)

    def update_sub_state(self, Sv_sub, Cov):
        return _absorber.SubStateVectorAbsorber_update_sub_state(self, Sv_sub, Cov)

    def update_sub_state_hook(self):
        return _absorber.SubStateVectorAbsorber_update_sub_state_hook(self)

    def _v_coefficient(self):
        return _absorber.SubStateVectorAbsorber__v_coefficient(self)

    def _v_used_flag_value(self):
        return _absorber.SubStateVectorAbsorber__v_used_flag_value(self)

    def _v_pressure(self):
        return _absorber.SubStateVectorAbsorber__v_pressure(self)
    __swig_destroy__ = _absorber.delete_SubStateVectorAbsorber
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _absorber.disown_SubStateVectorAbsorber(self)
        return weakref_proxy(self)
SubStateVectorAbsorber_swigregister = _absorber.SubStateVectorAbsorber_swigregister
SubStateVectorAbsorber_swigregister(SubStateVectorAbsorber)

# This file is compatible with both classic and new-style classes.


