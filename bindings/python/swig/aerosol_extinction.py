# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_aerosol_extinction', [dirname(__file__)])
        except ImportError:
            import _aerosol_extinction
            return _aerosol_extinction
        if fp is not None:
            try:
                _mod = imp.load_module('_aerosol_extinction', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _aerosol_extinction = swig_import_helper()
    del swig_import_helper
else:
    import _aerosol_extinction
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aerosol_extinction.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _aerosol_extinction.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _aerosol_extinction.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _aerosol_extinction.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _aerosol_extinction.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _aerosol_extinction.SwigPyIterator_equal(self, x)

    def copy(self):
        return _aerosol_extinction.SwigPyIterator_copy(self)

    def next(self):
        return _aerosol_extinction.SwigPyIterator_next(self)

    def __next__(self):
        return _aerosol_extinction.SwigPyIterator___next__(self)

    def previous(self):
        return _aerosol_extinction.SwigPyIterator_previous(self)

    def advance(self, n):
        return _aerosol_extinction.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _aerosol_extinction.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _aerosol_extinction.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _aerosol_extinction.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _aerosol_extinction.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _aerosol_extinction.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _aerosol_extinction.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _aerosol_extinction.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_aerosol_extinction.SHARED_PTR_DISOWN_swigconstant(_aerosol_extinction)
SHARED_PTR_DISOWN = _aerosol_extinction.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.observer
import full_physics_swig.generic_object
import full_physics_swig.state_vector
class ObservableAerosolExtinction(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObservableAerosolExtinction, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObservableAerosolExtinction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aerosol_extinction.delete_ObservableAerosolExtinction
    __del__ = lambda self: None

    def add_observer_and_keep_reference(self, Obs):
        return _aerosol_extinction.ObservableAerosolExtinction_add_observer_and_keep_reference(self, Obs)

    def add_observer(self, Obs):
        return _aerosol_extinction.ObservableAerosolExtinction_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _aerosol_extinction.ObservableAerosolExtinction_remove_observer(self, Obs)
ObservableAerosolExtinction_swigregister = _aerosol_extinction.ObservableAerosolExtinction_swigregister
ObservableAerosolExtinction_swigregister(ObservableAerosolExtinction)

class ObserverAerosolExtinction(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObserverAerosolExtinction, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObserverAerosolExtinction, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _aerosol_extinction.new_ObserverAerosolExtinction()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _aerosol_extinction.delete_ObserverAerosolExtinction
    __del__ = lambda self: None

    def notify_update(self, Observed_object):
        return _aerosol_extinction.ObserverAerosolExtinction_notify_update(self, Observed_object)

    def notify_add(self, Observed_object):
        return _aerosol_extinction.ObserverAerosolExtinction_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _aerosol_extinction.ObserverAerosolExtinction_notify_remove(self, Observed_object)
ObserverAerosolExtinction_swigregister = _aerosol_extinction.ObserverAerosolExtinction_swigregister
ObserverAerosolExtinction_swigregister(ObserverAerosolExtinction)

class AerosolExtinction(full_physics_swig.state_vector.StateVectorObserver, ObservableAerosolExtinction):
    """

    This class maps the state vector to the aerosol extinction on each
    level.

    Other objects may depend on the AerosolExtinction, and should be
    updated when the AerosolExtinction is updated. To facilitate that,
    this class in an Oberverable, and objects can add themselves as
    Observers to be notified when the AerosolExtinction is updated.

    When implementing a new class, you almost always will want to derive
    from AerosolExtinctionImpBase rather than from this class. See that
    class for a description.

    C++ includes: aerosol_extinction.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.state_vector.StateVectorObserver, ObservableAerosolExtinction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AerosolExtinction, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.state_vector.StateVectorObserver, ObservableAerosolExtinction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AerosolExtinction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aerosol_extinction.delete_AerosolExtinction
    __del__ = lambda self: None

    def add_observer(self, Obs):
        """

        virtual void FullPhysics::AerosolExtinction::add_observer(Observer< AerosolExtinction > &Obs)

        """
        return _aerosol_extinction.AerosolExtinction_add_observer(self, Obs)


    def remove_observer(self, Obs):
        """

        virtual void FullPhysics::AerosolExtinction::remove_observer(Observer< AerosolExtinction > &Obs)

        """
        return _aerosol_extinction.AerosolExtinction_remove_observer(self, Obs)


    def clone(self, *args):
        """

        virtual boost::shared_ptr<AerosolExtinction> FullPhysics::AerosolExtinction::clone(const boost::shared_ptr< Pressure > &Press) const =0
        This version of clone takes a pressure to use.

        The intent is that the pressure has been cloned from the original
        pressure (although this class has no way to verify this). This allows
        sets of objects to be cloned using a common Pressure clone, e.g.
        Atmosphere. 
        """
        return _aerosol_extinction.AerosolExtinction_clone(self, *args)


    def extinction_for_layer(self, i):
        """

        virtual AutoDerivative<double> FullPhysics::AerosolExtinction::extinction_for_layer(int i) const =0
        Extinction for given layer. 
        """
        return _aerosol_extinction.AerosolExtinction_extinction_for_layer(self, i)


    def _v_aerosol_name(self):
        """

        virtual std::string FullPhysics::AerosolExtinction::aerosol_name() const =0
        Name of aerosol. 
        """
        return _aerosol_extinction.AerosolExtinction__v_aerosol_name(self)


    @property
    def aerosol_name(self):
        return self._v_aerosol_name()


    def __str__(self):
        return _aerosol_extinction.AerosolExtinction___str__(self)

    def print_desc(self, Os):
        return _aerosol_extinction.AerosolExtinction_print_desc(self, Os)
AerosolExtinction_swigregister = _aerosol_extinction.AerosolExtinction_swigregister
AerosolExtinction_swigregister(AerosolExtinction)

class vector_aerosol_extinction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_aerosol_extinction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_aerosol_extinction, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _aerosol_extinction.vector_aerosol_extinction_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _aerosol_extinction.vector_aerosol_extinction___nonzero__(self)

    def __bool__(self):
        return _aerosol_extinction.vector_aerosol_extinction___bool__(self)

    def __len__(self):
        return _aerosol_extinction.vector_aerosol_extinction___len__(self)

    def __getslice__(self, i, j):
        return _aerosol_extinction.vector_aerosol_extinction___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _aerosol_extinction.vector_aerosol_extinction___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _aerosol_extinction.vector_aerosol_extinction___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _aerosol_extinction.vector_aerosol_extinction___delitem__(self, *args)

    def __getitem__(self, *args):
        return _aerosol_extinction.vector_aerosol_extinction___getitem__(self, *args)

    def __setitem__(self, *args):
        return _aerosol_extinction.vector_aerosol_extinction___setitem__(self, *args)

    def pop(self):
        return _aerosol_extinction.vector_aerosol_extinction_pop(self)

    def append(self, x):
        return _aerosol_extinction.vector_aerosol_extinction_append(self, x)

    def empty(self):
        return _aerosol_extinction.vector_aerosol_extinction_empty(self)

    def size(self):
        return _aerosol_extinction.vector_aerosol_extinction_size(self)

    def swap(self, v):
        return _aerosol_extinction.vector_aerosol_extinction_swap(self, v)

    def begin(self):
        return _aerosol_extinction.vector_aerosol_extinction_begin(self)

    def end(self):
        return _aerosol_extinction.vector_aerosol_extinction_end(self)

    def rbegin(self):
        return _aerosol_extinction.vector_aerosol_extinction_rbegin(self)

    def rend(self):
        return _aerosol_extinction.vector_aerosol_extinction_rend(self)

    def clear(self):
        return _aerosol_extinction.vector_aerosol_extinction_clear(self)

    def get_allocator(self):
        return _aerosol_extinction.vector_aerosol_extinction_get_allocator(self)

    def pop_back(self):
        return _aerosol_extinction.vector_aerosol_extinction_pop_back(self)

    def erase(self, *args):
        return _aerosol_extinction.vector_aerosol_extinction_erase(self, *args)

    def __init__(self, *args):
        this = _aerosol_extinction.new_vector_aerosol_extinction(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _aerosol_extinction.vector_aerosol_extinction_push_back(self, x)

    def front(self):
        return _aerosol_extinction.vector_aerosol_extinction_front(self)

    def back(self):
        return _aerosol_extinction.vector_aerosol_extinction_back(self)

    def assign(self, n, x):
        return _aerosol_extinction.vector_aerosol_extinction_assign(self, n, x)

    def resize(self, *args):
        return _aerosol_extinction.vector_aerosol_extinction_resize(self, *args)

    def insert(self, *args):
        return _aerosol_extinction.vector_aerosol_extinction_insert(self, *args)

    def reserve(self, n):
        return _aerosol_extinction.vector_aerosol_extinction_reserve(self, n)

    def capacity(self):
        return _aerosol_extinction.vector_aerosol_extinction_capacity(self)
    __swig_destroy__ = _aerosol_extinction.delete_vector_aerosol_extinction
    __del__ = lambda self: None
vector_aerosol_extinction_swigregister = _aerosol_extinction.vector_aerosol_extinction_swigregister
vector_aerosol_extinction_swigregister(vector_aerosol_extinction)

# This file is compatible with both classic and new-style classes.


