# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_relative_humidity', [dirname(__file__)])
        except ImportError:
            import _relative_humidity
            return _relative_humidity
        if fp is not None:
            try:
                _mod = imp.load_module('_relative_humidity', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _relative_humidity = swig_import_helper()
    del swig_import_helper
else:
    import _relative_humidity
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _relative_humidity.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _relative_humidity.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _relative_humidity.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _relative_humidity.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _relative_humidity.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _relative_humidity.SwigPyIterator_equal(self, x)

    def copy(self):
        return _relative_humidity.SwigPyIterator_copy(self)

    def next(self):
        return _relative_humidity.SwigPyIterator_next(self)

    def __next__(self):
        return _relative_humidity.SwigPyIterator___next__(self)

    def previous(self):
        return _relative_humidity.SwigPyIterator_previous(self)

    def advance(self, n):
        return _relative_humidity.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _relative_humidity.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _relative_humidity.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _relative_humidity.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _relative_humidity.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _relative_humidity.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _relative_humidity.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _relative_humidity.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_relative_humidity.SHARED_PTR_DISOWN_swigconstant(_relative_humidity)
SHARED_PTR_DISOWN = _relative_humidity.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
import full_physics_swig.state_vector
class RelativeHumidity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelativeHumidity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelativeHumidity, name)
    __repr__ = _swig_repr

    def __init__(self, Abs, Temp, Press):
        this = _relative_humidity.new_RelativeHumidity(Abs, Temp, Press)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clone(self, *args):
        return _relative_humidity.RelativeHumidity_clone(self, *args)

    def relative_humidity_grid(self):
        return _relative_humidity.RelativeHumidity_relative_humidity_grid(self)

    def relative_humidity_layer(self):
        return _relative_humidity.RelativeHumidity_relative_humidity_layer(self)

    def specific_humidity_grid(self):
        return _relative_humidity.RelativeHumidity_specific_humidity_grid(self)

    def __str__(self):
        return _relative_humidity.RelativeHumidity___str__(self)
    __swig_destroy__ = _relative_humidity.delete_RelativeHumidity
    __del__ = lambda self: None
RelativeHumidity_swigregister = _relative_humidity.RelativeHumidity_swigregister
RelativeHumidity_swigregister(RelativeHumidity)

# This file is compatible with both classic and new-style classes.


