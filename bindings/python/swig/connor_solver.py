# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_connor_solver', [dirname(__file__)])
        except ImportError:
            import _connor_solver
            return _connor_solver
        if fp is not None:
            try:
                _mod = imp.load_module('_connor_solver', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _connor_solver = swig_import_helper()
    del swig_import_helper
else:
    import _connor_solver
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_connor_solver.SHARED_PTR_DISOWN_swigconstant(_connor_solver)
SHARED_PTR_DISOWN = _connor_solver.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.observer
import full_physics_swig.generic_object
class ObservableConnor(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObservableConnor, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObservableConnor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _connor_solver.delete_ObservableConnor
    __del__ = lambda self: None

    def add_observer_and_keep_reference(self, Obs):
        return _connor_solver.ObservableConnor_add_observer_and_keep_reference(self, Obs)

    def add_observer(self, Obs):
        return _connor_solver.ObservableConnor_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _connor_solver.ObservableConnor_remove_observer(self, Obs)
ObservableConnor_swigregister = _connor_solver.ObservableConnor_swigregister
ObservableConnor_swigregister(ObservableConnor)

class ConnorSolver(ObservableConnor):
    __swig_setmethods__ = {}
    for _s in [ObservableConnor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnorSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [ObservableConnor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConnorSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _connor_solver.new_ConnorSolver(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add_observer(self, Obs):
        return _connor_solver.ConnorSolver_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _connor_solver.ConnorSolver_remove_observer(self, Obs)

    def save_test_data(self, Fname):
        return _connor_solver.ConnorSolver_save_test_data(self, Fname)

    def test_do_inversion(self, Fname, Dx, Kt_se_m1_k):
        return _connor_solver.ConnorSolver_test_do_inversion(self, Fname, Dx, Kt_se_m1_k)

    def solve(self, Initial_guess, Apriori, Apriori_cov):
        return _connor_solver.ConnorSolver_solve(self, Initial_guess, Apriori, Apriori_cov)

    def _v_state(self, *args):
        return _connor_solver.ConnorSolver__v_state(self, *args)

    @property
    def state(self):
        return self._v_state()

    @state.setter
    def state(self, value):
      self._v_state(value)


    def _v_aposteriori_covariance_scaled(self):
        return _connor_solver.ConnorSolver__v_aposteriori_covariance_scaled(self)

    @property
    def aposteriori_covariance_scaled(self):
        return self._v_aposteriori_covariance_scaled()


    def _v_aposteriori_covariance(self):
        return _connor_solver.ConnorSolver__v_aposteriori_covariance(self)

    @property
    def aposteriori_covariance(self):
        return self._v_aposteriori_covariance()


    def _v_x_solution_uncertainty(self):
        return _connor_solver.ConnorSolver__v_x_solution_uncertainty(self)

    @property
    def x_solution_uncertainty(self):
        return self._v_x_solution_uncertainty()


    def _v_averaging_kernel(self):
        return _connor_solver.ConnorSolver__v_averaging_kernel(self)

    @property
    def averaging_kernel(self):
        return self._v_averaging_kernel()


    def _v_gamma_last_step(self):
        return _connor_solver.ConnorSolver__v_gamma_last_step(self)

    @property
    def gamma_last_step(self):
        return self._v_gamma_last_step()


    def _v_number_iteration(self):
        return _connor_solver.ConnorSolver__v_number_iteration(self)

    @property
    def number_iteration(self):
        return self._v_number_iteration()


    def _v_number_divergent(self):
        return _connor_solver.ConnorSolver__v_number_divergent(self)

    @property
    def number_divergent(self):
        return self._v_number_divergent()


    def _v_outcome_flag(self):
        return _connor_solver.ConnorSolver__v_outcome_flag(self)

    @property
    def outcome_flag(self):
        return self._v_outcome_flag()


    def _v_x_apriori(self):
        return _connor_solver.ConnorSolver__v_x_apriori(self)

    @property
    def x_apriori(self):
        return self._v_x_apriori()


    def _v_x_apriori_uncertainty(self):
        return _connor_solver.ConnorSolver__v_x_apriori_uncertainty(self)

    @property
    def x_apriori_uncertainty(self):
        return self._v_x_apriori_uncertainty()


    def _v_x_solution(self):
        return _connor_solver.ConnorSolver__v_x_solution(self)

    @property
    def x_solution(self):
        return self._v_x_solution()


    def _v_x_solution_zero_unused(self):
        return _connor_solver.ConnorSolver__v_x_solution_zero_unused(self)

    @property
    def x_solution_zero_unused(self):
        return self._v_x_solution_zero_unused()


    def _v_apriori_covariance(self):
        return _connor_solver.ConnorSolver__v_apriori_covariance(self)

    @property
    def apriori_covariance(self):
        return self._v_apriori_covariance()


    def _v_jacobian(self):
        return _connor_solver.ConnorSolver__v_jacobian(self)

    @property
    def jacobian(self):
        return self._v_jacobian()


    def _v_fit_statistic(self):
        return _connor_solver.ConnorSolver__v_fit_statistic(self)

    @property
    def fit_statistic(self):
        return self._v_fit_statistic()


    def _v_residual(self):
        return _connor_solver.ConnorSolver__v_residual(self)

    @property
    def residual(self):
        return self._v_residual()


    def _v_residual_covariance_diagonal(self):
        return _connor_solver.ConnorSolver__v_residual_covariance_diagonal(self)

    @property
    def residual_covariance_diagonal(self):
        return self._v_residual_covariance_diagonal()


    def _v_apriori_covariance_inv_norm(self):
        return _connor_solver.ConnorSolver__v_apriori_covariance_inv_norm(self)

    @property
    def apriori_covariance_inv_norm(self):
        return self._v_apriori_covariance_inv_norm()


    def _v_cost_function(self):
        return _connor_solver.ConnorSolver__v_cost_function(self)

    @property
    def cost_function(self):
        return self._v_cost_function()


    def _v_convergence_check(self):
        return _connor_solver.ConnorSolver__v_convergence_check(self)

    @property
    def convergence_check(self):
        return self._v_convergence_check()


    def save_state(self, Fname):
        return _connor_solver.ConnorSolver_save_state(self, Fname)

    def load_state(self, Fname):
        return _connor_solver.ConnorSolver_load_state(self, Fname)
    __swig_destroy__ = _connor_solver.delete_ConnorSolver
    __del__ = lambda self: None
ConnorSolver_swigregister = _connor_solver.ConnorSolver_swigregister
ConnorSolver_swigregister(ConnorSolver)

class ConnorSolverState(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnorSolverState, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConnorSolverState, name)
    __repr__ = _swig_repr

    def __init__(self, X_i, X_a, Apriori_cov_scaled, Sa_m1_scaled, Sigma_ap, Gamma, Gamma_last_step, Gamma_intial, Residual, Se, K, Kt_se_m1_k, Dx, Fstat):
        this = _connor_solver.new_ConnorSolverState(X_i, X_a, Apriori_cov_scaled, Sa_m1_scaled, Sigma_ap, Gamma, Gamma_last_step, Gamma_intial, Residual, Se, K, Kt_se_m1_k, Dx, Fstat)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __str__(self):
        return _connor_solver.ConnorSolverState___str__(self)

    def _v_x_i(self):
        return _connor_solver.ConnorSolverState__v_x_i(self)

    @property
    def x_i(self):
        return self._v_x_i()


    def _v_x_a(self):
        return _connor_solver.ConnorSolverState__v_x_a(self)

    @property
    def x_a(self):
        return self._v_x_a()


    def _v_apriori_cov_scaled(self):
        return _connor_solver.ConnorSolverState__v_apriori_cov_scaled(self)

    @property
    def apriori_cov_scaled(self):
        return self._v_apriori_cov_scaled()


    def _v_sa_m1_scaled(self):
        return _connor_solver.ConnorSolverState__v_sa_m1_scaled(self)

    @property
    def sa_m1_scaled(self):
        return self._v_sa_m1_scaled()


    def _v_sigma_ap(self):
        return _connor_solver.ConnorSolverState__v_sigma_ap(self)

    @property
    def sigma_ap(self):
        return self._v_sigma_ap()


    def _v_gamma(self):
        return _connor_solver.ConnorSolverState__v_gamma(self)

    @property
    def gamma(self):
        return self._v_gamma()


    def _v_gamma_last_step(self):
        return _connor_solver.ConnorSolverState__v_gamma_last_step(self)

    @property
    def gamma_last_step(self):
        return self._v_gamma_last_step()


    def _v_gamma_initial(self):
        return _connor_solver.ConnorSolverState__v_gamma_initial(self)

    @property
    def gamma_initial(self):
        return self._v_gamma_initial()


    def _v_residual(self):
        return _connor_solver.ConnorSolverState__v_residual(self)

    @property
    def residual(self):
        return self._v_residual()


    def _v_k(self):
        return _connor_solver.ConnorSolverState__v_k(self)

    @property
    def k(self):
        return self._v_k()


    def _v_kt_se_m1_k(self):
        return _connor_solver.ConnorSolverState__v_kt_se_m1_k(self)

    @property
    def kt_se_m1_k(self):
        return self._v_kt_se_m1_k()


    def _v_se(self):
        return _connor_solver.ConnorSolverState__v_se(self)

    @property
    def se(self):
        return self._v_se()


    def _v_dx(self):
        return _connor_solver.ConnorSolverState__v_dx(self)

    @property
    def dx(self):
        return self._v_dx()


    def _v_fstat(self):
        return _connor_solver.ConnorSolverState__v_fstat(self)

    @property
    def fstat(self):
        return self._v_fstat()


    @classmethod
    def pickle_format_version(cls):
      return 1

    def __reduce__(self):
      return _new_from_init, (self.__class__, 1, self.x_i,self.x_a,self.apriori_cov_scaled,self.sa_m1_scaled,self.sigma_ap,self.gamma,self.gamma_last_step,self.gamma_initial,self.residual,self.se,self.k,self.kt_se_m1_k,self.dx,self.fstat)

    __swig_destroy__ = _connor_solver.delete_ConnorSolverState
    __del__ = lambda self: None
ConnorSolverState_swigregister = _connor_solver.ConnorSolverState_swigregister
ConnorSolverState_swigregister(ConnorSolverState)

class ObserverConnorSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObserverConnorSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObserverConnorSolver, name)
    __repr__ = _swig_repr

    def notify_add(self, Obs):
        return _connor_solver.ObserverConnorSolver_notify_add(self, Obs)

    def notify_remove(self, Obs):
        return _connor_solver.ObserverConnorSolver_notify_remove(self, Obs)

    def notify_update(self, Obs):
        return _connor_solver.ObserverConnorSolver_notify_update(self, Obs)

    def __init__(self):
        if self.__class__ == ObserverConnorSolver:
            _self = None
        else:
            _self = self
        this = _connor_solver.new_ObserverConnorSolver(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _connor_solver.disown_ObserverConnorSolver(self)
        return weakref_proxy(self)
ObserverConnorSolver_swigregister = _connor_solver.ObserverConnorSolver_swigregister
ObserverConnorSolver_swigregister(ObserverConnorSolver)

# This file is compatible with both classic and new-style classes.


