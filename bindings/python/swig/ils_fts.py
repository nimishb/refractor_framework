# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ils_fts', [dirname(__file__)])
        except ImportError:
            import _ils_fts
            return _ils_fts
        if fp is not None:
            try:
                _mod = imp.load_module('_ils_fts', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ils_fts = swig_import_helper()
    del swig_import_helper
else:
    import _ils_fts
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_ils_fts.SHARED_PTR_DISOWN_swigconstant(_ils_fts)
SHARED_PTR_DISOWN = _ils_fts.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.ils
import full_physics_swig.state_vector
import full_physics_swig.generic_object
import full_physics_swig.dispersion
import full_physics_swig.level_1b
class IlsFts(full_physics_swig.ils.Ils, full_physics_swig.dispersion.ObserverDispersion):
    """

    This does an ILS convolution for FTS data.

    This wraps some old Fortran code that models and sinc + box-car. We
    may replace this at some point.

    C++ includes: ils_fts.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.ils.Ils, full_physics_swig.dispersion.ObserverDispersion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IlsFts, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.ils.Ils, full_physics_swig.dispersion.ObserverDispersion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IlsFts, name)
    __repr__ = _swig_repr

    def __init__(self, Disp, Dispersion_perturb, Level_1b, Spec_index, Band_name, Hdf_band_name):
        """

        FullPhysics::IlsFts::IlsFts(const boost::shared_ptr< DispersionPolynomial > &Disp, const
        blitz::Array< double, 2 > &Dispersion_perturb, const
        boost::shared_ptr< Level1bFts > &Level_1b, int Spec_index, const
        std::string &Band_name, const std::string &Hdf_band_name, const
        DoubleWithUnit &Ils_half_width=DoubleWithUnit((2000+1)*1e-2,
        units::inv_cm))

        """
        this = _ils_fts.new_IlsFts(Disp, Dispersion_perturb, Level_1b, Spec_index, Band_name, Hdf_band_name)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def notify_add(self, Sv):
        """

        virtual void FullPhysics::IlsFts::notify_add(StateVector &Sv)

        """
        return _ils_fts.IlsFts_notify_add(self, Sv)


    def notify_remove(self, Sv):
        """

        virtual void FullPhysics::IlsFts::notify_remove(StateVector &Sv)

        """
        return _ils_fts.IlsFts_notify_remove(self, Sv)


    def notify_update(self, *args):
        """

        virtual void FullPhysics::IlsFts::notify_update(const Dispersion &D)

        """
        return _ils_fts.IlsFts_notify_update(self, *args)


    def apply_ils(self, *args):
        """

        virtual ArrayAd<double, 1> FullPhysics::IlsFts::apply_ils(const blitz::Array< double, 1 > &High_resolution_wave_number, const
        ArrayAd< double, 1 > &High_resolution_radiance, const std::vector< int
        > &Pixel_list) const

        """
        return _ils_fts.IlsFts_apply_ils(self, *args)


    def clone(self):
        """

        virtual boost::shared_ptr<Ils> FullPhysics::IlsFts::clone() const

        """
        return _ils_fts.IlsFts_clone(self)

    __swig_destroy__ = _ils_fts.delete_IlsFts
    __del__ = lambda self: None
IlsFts_swigregister = _ils_fts.IlsFts_swigregister
IlsFts_swigregister(IlsFts)

# This file is compatible with both classic and new-style classes.


