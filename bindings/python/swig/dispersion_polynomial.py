# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dispersion_polynomial', [dirname(__file__)])
        except ImportError:
            import _dispersion_polynomial
            return _dispersion_polynomial
        if fp is not None:
            try:
                _mod = imp.load_module('_dispersion_polynomial', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dispersion_polynomial = swig_import_helper()
    del swig_import_helper
else:
    import _dispersion_polynomial
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_dispersion_polynomial.SHARED_PTR_DISOWN_swigconstant(_dispersion_polynomial)
SHARED_PTR_DISOWN = _dispersion_polynomial.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.sub_state_vector_array
import full_physics_swig.generic_object
import full_physics_swig.dispersion
class DispersionPolynomial(full_physics_swig.dispersion.SubStateVectorArrayDispersion):
    """

    This is an implementation of Dispersion that uses a polynomial
    expression to calculate the wavenumbers.

    Note that there are two minor variations of the dispersion polynomial.
    The first wavenumber returned can either be the polynomial evaluated
    at the value of "1", or a value of "0". By convention, the
    polynomial is 1 based for GOSAT and OCO, but 0 based for FTS.

    C++ includes: dispersion_polynomial.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.dispersion.SubStateVectorArrayDispersion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DispersionPolynomial, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.dispersion.SubStateVectorArrayDispersion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DispersionPolynomial, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        FullPhysics::DispersionPolynomial::DispersionPolynomial(const blitz::Array< double, 1 > &Coeff, const blitz::Array< bool, 1 >
        &Used_flag, const std::string &Coeff_unit_name, const std::string
        &Band_name, int Number_pixel, bool Is_one_based)

        """
        this = _dispersion_polynomial.new_DispersionPolynomial(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _dispersion_polynomial.delete_DispersionPolynomial
    __del__ = lambda self: None

    def _v_pixel_grid(self):
        """

        virtual SpectralDomain FullPhysics::DispersionPolynomial::pixel_grid() const

        """
        return _dispersion_polynomial.DispersionPolynomial__v_pixel_grid(self)


    @property
    def pixel_grid(self):
        return self._v_pixel_grid()


    def clone(self):
        """

        virtual boost::shared_ptr<Dispersion> FullPhysics::DispersionPolynomial::clone() const

        """
        return _dispersion_polynomial.DispersionPolynomial_clone(self)

DispersionPolynomial_swigregister = _dispersion_polynomial.DispersionPolynomial_swigregister
DispersionPolynomial_swigregister(DispersionPolynomial)

# This file is compatible with both classic and new-style classes.


