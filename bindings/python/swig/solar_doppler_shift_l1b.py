# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_solar_doppler_shift_l1b', [dirname(__file__)])
        except ImportError:
            import _solar_doppler_shift_l1b
            return _solar_doppler_shift_l1b
        if fp is not None:
            try:
                _mod = imp.load_module('_solar_doppler_shift_l1b', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _solar_doppler_shift_l1b = swig_import_helper()
    del swig_import_helper
else:
    import _solar_doppler_shift_l1b
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_solar_doppler_shift_l1b.SHARED_PTR_DISOWN_swigconstant(_solar_doppler_shift_l1b)
SHARED_PTR_DISOWN = _solar_doppler_shift_l1b.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.solar_doppler_shift
import full_physics_swig.generic_object
class SolarDopplerShiftL1b(full_physics_swig.solar_doppler_shift.SolarDopplerShift):
    """

    This class handles the solar Doppler stretch to calculate the shift of
    the solar lines with respect to the telluric lines.

    This implementation gets the Level 1b solar velocity and solar
    distance passed to it.

    C++ includes: solar_doppler_shift_l1b.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.solar_doppler_shift.SolarDopplerShift]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolarDopplerShiftL1b, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.solar_doppler_shift.SolarDopplerShift]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolarDopplerShiftL1b, name)
    __repr__ = _swig_repr

    def __init__(self, Solar_distance, Solar_relative_velocity, Apply_doppler_shift=True):
        """

        FullPhysics::SolarDopplerShiftL1b::SolarDopplerShiftL1b(const DoubleWithUnit &Solar_distance, const DoubleWithUnit
        &Solar_relative_velocity, bool Apply_doppler_shift=true)

        """
        this = _solar_doppler_shift_l1b.new_SolarDopplerShiftL1b(Solar_distance, Solar_relative_velocity, Apply_doppler_shift)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _v_doppler_shift(self):
        """

        double FullPhysics::SolarDopplerShiftL1b::doppler_shift() const

        """
        return _solar_doppler_shift_l1b.SolarDopplerShiftL1b__v_doppler_shift(self)


    @property
    def doppler_shift(self):
        return self._v_doppler_shift()


    def _v_solar_relative_velocity(self):
        """

        DoubleWithUnit FullPhysics::SolarDopplerShiftL1b::solar_relative_velocity() const
        Velocity of the sounding to the center of the sun.

        Positive means they are getting farther apart. This does include the
        rotation of the earth (cf solar_velocity in
        SolarDopplerShiftPolynomial which does not include rotation of earth)

        """
        return _solar_doppler_shift_l1b.SolarDopplerShiftL1b__v_solar_relative_velocity(self)


    @property
    def solar_relative_velocity(self):
        return self._v_solar_relative_velocity()


    def _v_solar_distance(self):
        """

        virtual DoubleWithUnit FullPhysics::SolarDopplerShiftL1b::solar_distance() const

        """
        return _solar_doppler_shift_l1b.SolarDopplerShiftL1b__v_solar_distance(self)


    @property
    def solar_distance(self):
        return self._v_solar_distance()


    def doppler_stretch(self, Spec_domain):
        """

        virtual SpectralDomain FullPhysics::SolarDopplerShiftL1b::doppler_stretch(const SpectralDomain &Spec_domain) const

        """
        return _solar_doppler_shift_l1b.SolarDopplerShiftL1b_doppler_stretch(self, Spec_domain)

    __swig_destroy__ = _solar_doppler_shift_l1b.delete_SolarDopplerShiftL1b
    __del__ = lambda self: None
SolarDopplerShiftL1b_swigregister = _solar_doppler_shift_l1b.SolarDopplerShiftL1b_swigregister
SolarDopplerShiftL1b_swigregister(SolarDopplerShiftL1b)

# This file is compatible with both classic and new-style classes.


