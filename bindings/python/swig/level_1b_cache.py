# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_level_1b_cache', [dirname(__file__)])
        except ImportError:
            import _level_1b_cache
            return _level_1b_cache
        if fp is not None:
            try:
                _mod = imp.load_module('_level_1b_cache', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _level_1b_cache = swig_import_helper()
    del swig_import_helper
else:
    import _level_1b_cache
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_level_1b_cache.SHARED_PTR_DISOWN_swigconstant(_level_1b_cache)
SHARED_PTR_DISOWN = _level_1b_cache.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.level_1b
import full_physics_swig.generic_object
class Level1bCache(full_physics_swig.level_1b.Level1b):
    """

    This is a Level1b implementation that just saves the data read from
    another Level1b object.

    We then allow these values to be changed if desired. This can be
    useful when setting up special run in Python, among other uses.

    C++ includes: level_1b_cache.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.level_1b.Level1b]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Level1bCache, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.level_1b.Level1b]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Level1bCache, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def latitude(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::latitude(int i) const

        """
        return _level_1b_cache.Level1bCache_latitude(self, i)


    def set_latitude(self, i, V):
        """

        void FullPhysics::Level1bCache::set_latitude(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_latitude(self, i, V)


    def longitude(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::longitude(int i) const

        """
        return _level_1b_cache.Level1bCache_longitude(self, i)


    def set_longitude(self, i, V):
        """

        void FullPhysics::Level1bCache::set_longitude(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_longitude(self, i, V)


    def sounding_zenith(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::sounding_zenith(int i) const

        """
        return _level_1b_cache.Level1bCache_sounding_zenith(self, i)


    def set_sounding_zenith(self, i, V):
        """

        void FullPhysics::Level1bCache::set_sounding_zenith(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_sounding_zenith(self, i, V)


    def sounding_azimuth(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::sounding_azimuth(int i) const

        """
        return _level_1b_cache.Level1bCache_sounding_azimuth(self, i)


    def set_sounding_azimuth(self, i, V):
        """

        void FullPhysics::Level1bCache::set_sounding_azimuth(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_sounding_azimuth(self, i, V)


    def stokes_coefficient(self, i):
        """

        virtual blitz::Array<double, 1> FullPhysics::Level1bCache::stokes_coefficient(int i) const

        """
        return _level_1b_cache.Level1bCache_stokes_coefficient(self, i)


    def set_stokes_coefficient(self, i, V):
        """

        void FullPhysics::Level1bCache::set_stokes_coefficient(int i, const blitz::Array< double, 1 > &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_stokes_coefficient(self, i, V)


    def solar_zenith(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::solar_zenith(int i) const

        """
        return _level_1b_cache.Level1bCache_solar_zenith(self, i)


    def set_solar_zenith(self, i, V):
        """

        void FullPhysics::Level1bCache::set_solar_zenith(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_solar_zenith(self, i, V)


    def solar_azimuth(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::solar_azimuth(int i) const

        """
        return _level_1b_cache.Level1bCache_solar_azimuth(self, i)


    def set_solar_azimuth(self, i, V):
        """

        void FullPhysics::Level1bCache::set_solar_azimuth(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_solar_azimuth(self, i, V)


    def altitude(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::altitude(int i) const

        """
        return _level_1b_cache.Level1bCache_altitude(self, i)


    def set_altitude(self, i, V):
        """

        void FullPhysics::Level1bCache::set_altitude(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_altitude(self, i, V)


    def relative_velocity(self, i):
        """

        virtual DoubleWithUnit FullPhysics::Level1bCache::relative_velocity(int i) const

        """
        return _level_1b_cache.Level1bCache_relative_velocity(self, i)


    def set_relative_velocity(self, i, V):
        """

        void FullPhysics::Level1bCache::set_relative_velocity(int i, const DoubleWithUnit &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_relative_velocity(self, i, V)


    def spectral_coefficient(self, i):
        """

        virtual ArrayWithUnit<double, 1> FullPhysics::Level1bCache::spectral_coefficient(int i) const

        """
        return _level_1b_cache.Level1bCache_spectral_coefficient(self, i)


    def set_spectral_coefficient(self, i, V):
        """

        void FullPhysics::Level1bCache::set_spectral_coefficient(int i, const ArrayWithUnit< double, 1 > &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_spectral_coefficient(self, i, V)


    def time(self, i):
        """

        virtual Time FullPhysics::Level1bCache::time(int i) const

        """
        return _level_1b_cache.Level1bCache_time(self, i)


    def set_time(self, i, V):
        """

        void FullPhysics::Level1bCache::set_time(int i, const Time &V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_time(self, i, V)


    def radiance(self, Spec_index):
        """

        virtual SpectralRange FullPhysics::Level1bCache::radiance(int i) const

        """
        return _level_1b_cache.Level1bCache_radiance(self, Spec_index)


    def set_radiance(self, *args):
        """

        void FullPhysics::Level1bCache::set_radiance(int i, const SpectralRange &V, const std::vector< int > &Plist)
        Change value, but only for a subset of pixels.

        This might come from the ForwardModelSpectralGrid for example. 
        """
        return _level_1b_cache.Level1bCache_set_radiance(self, *args)


    def set_sounding_id(self, V):
        """

        void FullPhysics::Level1bCache::set_sounding_id(int64_t V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_sounding_id(self, V)


    def set_exposure_index(self, V):
        """

        void FullPhysics::Level1bCache::set_exposure_index(int V)
        Change value. 
        """
        return _level_1b_cache.Level1bCache_set_exposure_index(self, V)

    __swig_destroy__ = _level_1b_cache.delete_Level1bCache
    __del__ = lambda self: None
Level1bCache_swigregister = _level_1b_cache.Level1bCache_swigregister
Level1bCache_swigregister(Level1bCache)

# This file is compatible with both classic and new-style classes.


