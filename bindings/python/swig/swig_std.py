# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swig_std', [dirname(__file__)])
        except ImportError:
            import _swig_std
            return _swig_std
        if fp is not None:
            try:
                _mod = imp.load_module('_swig_std', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _swig_std = swig_import_helper()
    del swig_import_helper
else:
    import _swig_std
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _swig_std.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _swig_std.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _swig_std.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _swig_std.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _swig_std.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _swig_std.SwigPyIterator_equal(self, x)

    def copy(self):
        return _swig_std.SwigPyIterator_copy(self)

    def next(self):
        return _swig_std.SwigPyIterator_next(self)

    def __next__(self):
        return _swig_std.SwigPyIterator___next__(self)

    def previous(self):
        return _swig_std.SwigPyIterator_previous(self)

    def advance(self, n):
        return _swig_std.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _swig_std.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _swig_std.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _swig_std.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _swig_std.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _swig_std.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _swig_std.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _swig_std.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _swig_std.ios_base_erase_event
    imbue_event = _swig_std.ios_base_imbue_event
    copyfmt_event = _swig_std.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _swig_std.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _swig_std.ios_base_flags(self, *args)

    def setf(self, *args):
        return _swig_std.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _swig_std.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _swig_std.ios_base_precision(self, *args)

    def width(self, *args):
        return _swig_std.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _swig_std.ios_base_sync_with_stdio
    if _newclass:
        sync_with_stdio = staticmethod(_swig_std.ios_base_sync_with_stdio)

    def imbue(self, __loc):
        return _swig_std.ios_base_imbue(self, __loc)

    def getloc(self):
        return _swig_std.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _swig_std.ios_base_xalloc
    if _newclass:
        xalloc = staticmethod(_swig_std.ios_base_xalloc)

    def iword(self, __ix):
        return _swig_std.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _swig_std.ios_base_pword(self, __ix)
    __swig_destroy__ = _swig_std.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _swig_std.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _swig_std.cvar
ios_base.boolalpha = _swig_std.cvar.ios_base_boolalpha
ios_base.dec = _swig_std.cvar.ios_base_dec
ios_base.fixed = _swig_std.cvar.ios_base_fixed
ios_base.hex = _swig_std.cvar.ios_base_hex
ios_base.internal = _swig_std.cvar.ios_base_internal
ios_base.left = _swig_std.cvar.ios_base_left
ios_base.oct = _swig_std.cvar.ios_base_oct
ios_base.right = _swig_std.cvar.ios_base_right
ios_base.scientific = _swig_std.cvar.ios_base_scientific
ios_base.showbase = _swig_std.cvar.ios_base_showbase
ios_base.showpoint = _swig_std.cvar.ios_base_showpoint
ios_base.showpos = _swig_std.cvar.ios_base_showpos
ios_base.skipws = _swig_std.cvar.ios_base_skipws
ios_base.unitbuf = _swig_std.cvar.ios_base_unitbuf
ios_base.uppercase = _swig_std.cvar.ios_base_uppercase
ios_base.adjustfield = _swig_std.cvar.ios_base_adjustfield
ios_base.basefield = _swig_std.cvar.ios_base_basefield
ios_base.floatfield = _swig_std.cvar.ios_base_floatfield
ios_base.badbit = _swig_std.cvar.ios_base_badbit
ios_base.eofbit = _swig_std.cvar.ios_base_eofbit
ios_base.failbit = _swig_std.cvar.ios_base_failbit
ios_base.goodbit = _swig_std.cvar.ios_base_goodbit
ios_base.app = _swig_std.cvar.ios_base_app
ios_base.ate = _swig_std.cvar.ios_base_ate
ios_base.binary = _swig_std.cvar.ios_base_binary
ios_base.ios_base_in = _swig_std.cvar.ios_base_ios_base_in
ios_base.out = _swig_std.cvar.ios_base_out
ios_base.trunc = _swig_std.cvar.ios_base_trunc
ios_base.beg = _swig_std.cvar.ios_base_beg
ios_base.cur = _swig_std.cvar.ios_base_cur
ios_base.end = _swig_std.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _swig_std.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _swig_std.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _swig_std.ios_base_xalloc()
ios_base_xalloc = _swig_std.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self):
        return _swig_std.ios_rdstate(self)

    def clear(self, *args):
        return _swig_std.ios_clear(self, *args)

    def setstate(self, __state):
        return _swig_std.ios_setstate(self, __state)

    def good(self):
        return _swig_std.ios_good(self)

    def eof(self):
        return _swig_std.ios_eof(self)

    def fail(self):
        return _swig_std.ios_fail(self)

    def bad(self):
        return _swig_std.ios_bad(self)

    def exceptions(self, *args):
        return _swig_std.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _swig_std.new_ios(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_std.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _swig_std.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _swig_std.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _swig_std.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _swig_std.ios_fill(self, *args)

    def imbue(self, __loc):
        return _swig_std.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _swig_std.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _swig_std.ios_widen(self, __c)
ios_swigregister = _swig_std.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _swig_std.new_ostream(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_std.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args):
        return _swig_std.ostream___lshift__(self, *args)

    def put(self, __c):
        return _swig_std.ostream_put(self, __c)

    def write(self, __s, __n):
        return _swig_std.ostream_write(self, __s, __n)

    def flush(self):
        return _swig_std.ostream_flush(self)

    def tellp(self):
        return _swig_std.ostream_tellp(self)

    def seekp(self, *args):
        return _swig_std.ostream_seekp(self, *args)
ostream_swigregister = _swig_std.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _swig_std.new_istream(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_std.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args):
        return _swig_std.istream___rshift__(self, *args)

    def gcount(self):
        return _swig_std.istream_gcount(self)

    def get(self, *args):
        return _swig_std.istream_get(self, *args)

    def getline(self, *args):
        return _swig_std.istream_getline(self, *args)

    def ignore(self, *args):
        return _swig_std.istream_ignore(self, *args)

    def peek(self):
        return _swig_std.istream_peek(self)

    def read(self, __s, __n):
        return _swig_std.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _swig_std.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _swig_std.istream_putback(self, __c)

    def unget(self):
        return _swig_std.istream_unget(self)

    def sync(self):
        return _swig_std.istream_sync(self)

    def tellg(self):
        return _swig_std.istream_tellg(self)

    def seekg(self, *args):
        return _swig_std.istream_seekg(self, *args)
istream_swigregister = _swig_std.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    __swig_setmethods__ = {}
    for _s in [istream, ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream, ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _swig_std.new_iostream(__sb)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _swig_std.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _swig_std.iostream_swigregister
iostream_swigregister(iostream)


_swig_std.endl_cb_ptr_swigconstant(_swig_std)
endl_cb_ptr = _swig_std.endl_cb_ptr

def endl(arg1):
    return _swig_std.endl(arg1)
endl = _swig_std.endl

_swig_std.ends_cb_ptr_swigconstant(_swig_std)
ends_cb_ptr = _swig_std.ends_cb_ptr

def ends(arg1):
    return _swig_std.ends(arg1)
ends = _swig_std.ends

_swig_std.flush_cb_ptr_swigconstant(_swig_std)
flush_cb_ptr = _swig_std.flush_cb_ptr

def flush(arg1):
    return _swig_std.flush(arg1)
flush = _swig_std.flush
class vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_std.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_std.vector_string___nonzero__(self)

    def __bool__(self):
        return _swig_std.vector_string___bool__(self)

    def __len__(self):
        return _swig_std.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _swig_std.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_std.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_std.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_std.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_std.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_std.vector_string___setitem__(self, *args)

    def pop(self):
        return _swig_std.vector_string_pop(self)

    def append(self, x):
        return _swig_std.vector_string_append(self, x)

    def empty(self):
        return _swig_std.vector_string_empty(self)

    def size(self):
        return _swig_std.vector_string_size(self)

    def swap(self, v):
        return _swig_std.vector_string_swap(self, v)

    def begin(self):
        return _swig_std.vector_string_begin(self)

    def end(self):
        return _swig_std.vector_string_end(self)

    def rbegin(self):
        return _swig_std.vector_string_rbegin(self)

    def rend(self):
        return _swig_std.vector_string_rend(self)

    def clear(self):
        return _swig_std.vector_string_clear(self)

    def get_allocator(self):
        return _swig_std.vector_string_get_allocator(self)

    def pop_back(self):
        return _swig_std.vector_string_pop_back(self)

    def erase(self, *args):
        return _swig_std.vector_string_erase(self, *args)

    def __init__(self, *args):
        this = _swig_std.new_vector_string(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _swig_std.vector_string_push_back(self, x)

    def front(self):
        return _swig_std.vector_string_front(self)

    def back(self):
        return _swig_std.vector_string_back(self)

    def assign(self, n, x):
        return _swig_std.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _swig_std.vector_string_resize(self, *args)

    def insert(self, *args):
        return _swig_std.vector_string_insert(self, *args)

    def reserve(self, n):
        return _swig_std.vector_string_reserve(self, n)

    def capacity(self):
        return _swig_std.vector_string_capacity(self)
    __swig_destroy__ = _swig_std.delete_vector_string
    __del__ = lambda self: None
vector_string_swigregister = _swig_std.vector_string_swigregister
vector_string_swigregister(vector_string)

class vector_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_std.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_std.vector_int___nonzero__(self)

    def __bool__(self):
        return _swig_std.vector_int___bool__(self)

    def __len__(self):
        return _swig_std.vector_int___len__(self)

    def __getslice__(self, i, j):
        return _swig_std.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_std.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_std.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_std.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_std.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_std.vector_int___setitem__(self, *args)

    def pop(self):
        return _swig_std.vector_int_pop(self)

    def append(self, x):
        return _swig_std.vector_int_append(self, x)

    def empty(self):
        return _swig_std.vector_int_empty(self)

    def size(self):
        return _swig_std.vector_int_size(self)

    def swap(self, v):
        return _swig_std.vector_int_swap(self, v)

    def begin(self):
        return _swig_std.vector_int_begin(self)

    def end(self):
        return _swig_std.vector_int_end(self)

    def rbegin(self):
        return _swig_std.vector_int_rbegin(self)

    def rend(self):
        return _swig_std.vector_int_rend(self)

    def clear(self):
        return _swig_std.vector_int_clear(self)

    def get_allocator(self):
        return _swig_std.vector_int_get_allocator(self)

    def pop_back(self):
        return _swig_std.vector_int_pop_back(self)

    def erase(self, *args):
        return _swig_std.vector_int_erase(self, *args)

    def __init__(self, *args):
        this = _swig_std.new_vector_int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _swig_std.vector_int_push_back(self, x)

    def front(self):
        return _swig_std.vector_int_front(self)

    def back(self):
        return _swig_std.vector_int_back(self)

    def assign(self, n, x):
        return _swig_std.vector_int_assign(self, n, x)

    def resize(self, *args):
        return _swig_std.vector_int_resize(self, *args)

    def insert(self, *args):
        return _swig_std.vector_int_insert(self, *args)

    def reserve(self, n):
        return _swig_std.vector_int_reserve(self, n)

    def capacity(self):
        return _swig_std.vector_int_capacity(self)
    __swig_destroy__ = _swig_std.delete_vector_int
    __del__ = lambda self: None
vector_int_swigregister = _swig_std.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _swig_std.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _swig_std.vector_double___nonzero__(self)

    def __bool__(self):
        return _swig_std.vector_double___bool__(self)

    def __len__(self):
        return _swig_std.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _swig_std.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _swig_std.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _swig_std.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _swig_std.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _swig_std.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _swig_std.vector_double___setitem__(self, *args)

    def pop(self):
        return _swig_std.vector_double_pop(self)

    def append(self, x):
        return _swig_std.vector_double_append(self, x)

    def empty(self):
        return _swig_std.vector_double_empty(self)

    def size(self):
        return _swig_std.vector_double_size(self)

    def swap(self, v):
        return _swig_std.vector_double_swap(self, v)

    def begin(self):
        return _swig_std.vector_double_begin(self)

    def end(self):
        return _swig_std.vector_double_end(self)

    def rbegin(self):
        return _swig_std.vector_double_rbegin(self)

    def rend(self):
        return _swig_std.vector_double_rend(self)

    def clear(self):
        return _swig_std.vector_double_clear(self)

    def get_allocator(self):
        return _swig_std.vector_double_get_allocator(self)

    def pop_back(self):
        return _swig_std.vector_double_pop_back(self)

    def erase(self, *args):
        return _swig_std.vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _swig_std.new_vector_double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _swig_std.vector_double_push_back(self, x)

    def front(self):
        return _swig_std.vector_double_front(self)

    def back(self):
        return _swig_std.vector_double_back(self)

    def assign(self, n, x):
        return _swig_std.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _swig_std.vector_double_resize(self, *args)

    def insert(self, *args):
        return _swig_std.vector_double_insert(self, *args)

    def reserve(self, n):
        return _swig_std.vector_double_reserve(self, n)

    def capacity(self):
        return _swig_std.vector_double_capacity(self)
    __swig_destroy__ = _swig_std.delete_vector_double
    __del__ = lambda self: None
vector_double_swigregister = _swig_std.vector_double_swigregister
vector_double_swigregister(vector_double)

# This file is compatible with both classic and new-style classes.


