# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_radiative_transfer_single_wn', [dirname(__file__)])
        except ImportError:
            import _radiative_transfer_single_wn
            return _radiative_transfer_single_wn
        if fp is not None:
            try:
                _mod = imp.load_module('_radiative_transfer_single_wn', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _radiative_transfer_single_wn = swig_import_helper()
    del swig_import_helper
else:
    import _radiative_transfer_single_wn
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_radiative_transfer_single_wn.SHARED_PTR_DISOWN_swigconstant(_radiative_transfer_single_wn)
SHARED_PTR_DISOWN = _radiative_transfer_single_wn.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.radiative_transfer_fixed_stokes_coefficient
import full_physics_swig.radiative_transfer
import full_physics_swig.generic_object
import full_physics_swig.observer
import full_physics_swig.named_spectrum
import full_physics_swig.state_vector
class RadiativeTransferSingleWn(full_physics_swig.radiative_transfer_fixed_stokes_coefficient.RadiativeTransferFixedStokesCoefficient):
    """

    This is a RadiativeTransfer that supplies an interface that can be
    called for a single wavenumber.

    This class mixes in some of the common functionality needed by LRadRt
    and LidortDriver. We may want to pull some of this out into separate
    classes. But right now we only have a few examples of a
    RadiativeTransfer and it isn't at all clear what a useful hierarchy
    would be. Rather than try to predict what we might need in the future,
    we really just have two categories: "The LSI" and "LRad and
    LIDORT". This class is really the later, and I guess we could have
    called it StuffThatIsInCommonWithLRadAndLidort.

    C++ includes: radiative_transfer_single_wn.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.radiative_transfer_fixed_stokes_coefficient.RadiativeTransferFixedStokesCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadiativeTransferSingleWn, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.radiative_transfer_fixed_stokes_coefficient.RadiativeTransferFixedStokesCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadiativeTransferSingleWn, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def _v_number_stream(self):
        """

        virtual int FullPhysics::RadiativeTransferSingleWn::number_stream() const =0
        Number of streams to use in processing.

        Note that Lidort 3.0 used a less common "full streams" that was
        twice the more commonly used "half streams". This function returns
        the later. This is the same as what is used in Lidort 3.5 and LRad.
        The "full streams" used in Lidort 3.0 would be twice this. 
        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn__v_number_stream(self)


    @property
    def number_stream(self):
        return self._v_number_stream()


    def _v_atmosphere(self):
        """

        const boost::shared_ptr<RtAtmosphere>& FullPhysics::RadiativeTransferSingleWn::atmosphere() const

        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn__v_atmosphere(self)


    @property
    def atmosphere(self):
        return self._v_atmosphere()


    def stokes(self, Spec_domain, Spec_index):
        """

        virtual blitz::Array<double, 2> FullPhysics::RadiativeTransferSingleWn::stokes(const SpectralDomain &Spec_domain, int Spec_index) const

        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes(self, Spec_domain, Spec_index)


    def stokes_and_jacobian(self, Spec_domain, Spec_index):
        """

        virtual ArrayAd<double, 2> FullPhysics::RadiativeTransferSingleWn::stokes_and_jacobian(const SpectralDomain &Spec_domain, int Spec_index) const

        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes_and_jacobian(self, Spec_domain, Spec_index)


    def stokes_single_wn(self, Wn, Spec_index, Iv):
        """

        virtual blitz::Array<double, 1> FullPhysics::RadiativeTransferSingleWn::stokes_single_wn(double Wn, int Spec_index, const ArrayAd< double, 2 > &Iv=ArrayAd<
        double, 2 >()) const =0
        Calculate stokes vector for the given wavenumber.

        You can optionally supply a set of intermediate atmosphere variables
        (e.g., taug, taur, taua_i) to use instead of with atmosphere_ptr() to
        calculate this.

        Parameters:
        -----------

        Wn:  Wavenumber to calculate for. This should be in cm^-1

        Spec_index:  The Spectral index

        Iv:  Optional intermediate variables to use, rather than calculating.

        The set of stokes coefficients. This is number_stokes() in size. 
        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes_single_wn(self, Wn, Spec_index, Iv)


    def stokes_and_jacobian_single_wn(self, Wn, Spec_index, Iv):
        """

        virtual ArrayAd<double, 1> FullPhysics::RadiativeTransferSingleWn::stokes_and_jacobian_single_wn(double Wn, int Spec_index, const ArrayAd< double, 2 > &Iv=ArrayAd<
        double, 2 >()) const =0
        Calculate stokes vector and Jacobian for the given wavenumber.

        You can optionally supply a set of intermediate atmosphere variables
        (e.g., taug, taur, taua_i) to use instead of with atmosphere_ptr() to
        calculate this.

        Parameters:
        -----------

        Wn:  Wavenumber to calculate for. This should be in cm^-1

        Spec_index:  The Spectral index

        Iv:  Optional intermediate variables to use, rather than calculating.

        The set of stokes coefficients. This is number_stokes() in size. 
        """
        return _radiative_transfer_single_wn.RadiativeTransferSingleWn_stokes_and_jacobian_single_wn(self, Wn, Spec_index, Iv)

    __swig_destroy__ = _radiative_transfer_single_wn.delete_RadiativeTransferSingleWn
    __del__ = lambda self: None
RadiativeTransferSingleWn_swigregister = _radiative_transfer_single_wn.RadiativeTransferSingleWn_swigregister
RadiativeTransferSingleWn_swigregister(RadiativeTransferSingleWn)

# This file is compatible with both classic and new-style classes.


