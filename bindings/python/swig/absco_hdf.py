# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_absco_hdf', [dirname(__file__)])
        except ImportError:
            import _absco_hdf
            return _absco_hdf
        if fp is not None:
            try:
                _mod = imp.load_module('_absco_hdf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _absco_hdf = swig_import_helper()
    del swig_import_helper
else:
    import _absco_hdf
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_absco_hdf.SHARED_PTR_DISOWN_swigconstant(_absco_hdf)
SHARED_PTR_DISOWN = _absco_hdf.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.absco
import full_physics_swig.gas_absorption
import full_physics_swig.generic_object
class AbscoHdf(full_physics_swig.absco.Absco):
    """

    This class is used to read the absco tables.

    This reads the HDF version of the files.

    Note that performance reasons we cache the data as we read it. The
    default cache is about 50 MB, which is a bit large but not too large.
    This can be adjusted if needed, either up for better performance or
    down for less memory.

    C++ includes: absco_hdf.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.absco.Absco]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbscoHdf, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.absco.Absco]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbscoHdf, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def load_file(self, *args):
        """

        void FullPhysics::AbscoHdf::load_file(const std::string &Fname, const SpectralBound &Spectral_bound, const
        std::vector< double > &Table_scale, int Cache_nline=5000)

        """
        return _absco_hdf.AbscoHdf_load_file(self, *args)


    def _v_broadener_name(self):
        """

        virtual std::string FullPhysics::AbscoHdf::broadener_name() const

        """
        return _absco_hdf.AbscoHdf__v_broadener_name(self)


    def _v_broadener_vmr_grid(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::AbscoHdf::broadener_vmr_grid() const

        """
        return _absco_hdf.AbscoHdf__v_broadener_vmr_grid(self)


    def _v_pressure_grid(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::AbscoHdf::pressure_grid() const

        """
        return _absco_hdf.AbscoHdf__v_pressure_grid(self)


    def _v_temperature_grid(self):
        """

        virtual blitz::Array<double, 2> FullPhysics::AbscoHdf::temperature_grid() const

        """
        return _absco_hdf.AbscoHdf__v_temperature_grid(self)


    def _v_file_name(self):
        """

        virtual std::string FullPhysics::AbscoHdf::file_name() const

        """
        return _absco_hdf.AbscoHdf__v_file_name(self)


    @property
    def file_name(self):
        return self._v_file_name()


    def have_data(self, wn):
        """

        virtual bool FullPhysics::AbscoHdf::have_data(double wn) const

        """
        return _absco_hdf.AbscoHdf_have_data(self, wn)

    __swig_destroy__ = _absco_hdf.delete_AbscoHdf
    __del__ = lambda self: None
AbscoHdf_swigregister = _absco_hdf.AbscoHdf_swigregister
AbscoHdf_swigregister(AbscoHdf)

# This file is compatible with both classic and new-style classes.


