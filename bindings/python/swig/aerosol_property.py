# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_aerosol_property', [dirname(__file__)])
        except ImportError:
            import _aerosol_property
            return _aerosol_property
        if fp is not None:
            try:
                _mod = imp.load_module('_aerosol_property', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _aerosol_property = swig_import_helper()
    del swig_import_helper
else:
    import _aerosol_property
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aerosol_property.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _aerosol_property.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _aerosol_property.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _aerosol_property.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _aerosol_property.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _aerosol_property.SwigPyIterator_equal(self, x)

    def copy(self):
        return _aerosol_property.SwigPyIterator_copy(self)

    def next(self):
        return _aerosol_property.SwigPyIterator_next(self)

    def __next__(self):
        return _aerosol_property.SwigPyIterator___next__(self)

    def previous(self):
        return _aerosol_property.SwigPyIterator_previous(self)

    def advance(self, n):
        return _aerosol_property.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _aerosol_property.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _aerosol_property.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _aerosol_property.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _aerosol_property.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _aerosol_property.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _aerosol_property.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _aerosol_property.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_aerosol_property.SHARED_PTR_DISOWN_swigconstant(_aerosol_property)
SHARED_PTR_DISOWN = _aerosol_property.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.observer
import full_physics_swig.generic_object
import full_physics_swig.state_vector
class ObservableAerosolProperty(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObservableAerosolProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObservableAerosolProperty, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aerosol_property.delete_ObservableAerosolProperty
    __del__ = lambda self: None

    def add_observer_and_keep_reference(self, Obs):
        return _aerosol_property.ObservableAerosolProperty_add_observer_and_keep_reference(self, Obs)

    def add_observer(self, Obs):
        return _aerosol_property.ObservableAerosolProperty_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _aerosol_property.ObservableAerosolProperty_remove_observer(self, Obs)
ObservableAerosolProperty_swigregister = _aerosol_property.ObservableAerosolProperty_swigregister
ObservableAerosolProperty_swigregister(ObservableAerosolProperty)

class ObserverAerosolProperty(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObserverAerosolProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObserverAerosolProperty, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _aerosol_property.new_ObserverAerosolProperty()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _aerosol_property.delete_ObserverAerosolProperty
    __del__ = lambda self: None

    def notify_update(self, Observed_object):
        return _aerosol_property.ObserverAerosolProperty_notify_update(self, Observed_object)

    def notify_add(self, Observed_object):
        return _aerosol_property.ObserverAerosolProperty_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _aerosol_property.ObserverAerosolProperty_notify_remove(self, Observed_object)
ObserverAerosolProperty_swigregister = _aerosol_property.ObserverAerosolProperty_swigregister
ObserverAerosolProperty_swigregister(ObserverAerosolProperty)

class AerosolProperty(full_physics_swig.state_vector.StateVectorObserver, ObservableAerosolProperty):
    """

    This gives the Aerosol properties for an Aerosol.

    Our current AerosolProperty - AerosolPropertyHdf - doesn't make any
    use of our StateVector, we don't have aerosol properties in it. But we
    may want to have this in the future, so we've made this class a
    StateVectorObserver.

    Other objects may depend on the AerosolProperty, and should be updated
    when the AerosolProperty is updated. To facilitate that, this class in
    an Oberverable, and objects can add themselves as Observers to be
    notified when the AerosolProperty is updated.

    When implementing a new class, you almost always will want to derive
    from AerosolPropertyImpBase rather than from this class. See that
    class for a description.

    C++ includes: aerosol_property.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.state_vector.StateVectorObserver, ObservableAerosolProperty]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AerosolProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.state_vector.StateVectorObserver, ObservableAerosolProperty]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AerosolProperty, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _aerosol_property.delete_AerosolProperty
    __del__ = lambda self: None

    def add_observer(self, Obs):
        """

        virtual void FullPhysics::AerosolProperty::add_observer(Observer< AerosolProperty > &Obs)

        """
        return _aerosol_property.AerosolProperty_add_observer(self, Obs)


    def remove_observer(self, Obs):
        """

        virtual void FullPhysics::AerosolProperty::remove_observer(Observer< AerosolProperty > &Obs)

        """
        return _aerosol_property.AerosolProperty_remove_observer(self, Obs)


    def clone(self, *args):
        """

        virtual boost::shared_ptr<AerosolProperty> FullPhysics::AerosolProperty::clone(const boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        RelativeHumidity > &Rh) const =0
        This version of clone takes a pressure to use.

        The intent is that the pressure has been cloned from the original
        pressure (although this class has no way to verify this). This allows
        sets of objects to be cloned using a common Pressure clone, e.g.
        Atmosphere. 
        """
        return _aerosol_property.AerosolProperty_clone(self, *args)


    def extinction_coefficient_each_layer(self, wn):
        """

        virtual ArrayAd<double, 1> FullPhysics::AerosolProperty::extinction_coefficient_each_layer(double wn) const =0
        Return extinction coefficient for the given wave number, for each
        layer.

        Parameters:
        -----------

        wn:  - Wavenumber 
        """
        return _aerosol_property.AerosolProperty_extinction_coefficient_each_layer(self, wn)


    def scattering_coefficient_each_layer(self, wn):
        """

        virtual ArrayAd<double, 1> FullPhysics::AerosolProperty::scattering_coefficient_each_layer(double wn) const =0
        Return scattering coefficient for the given wave number for each
        layer.

        Parameters:
        -----------

        wn:  - Wavenumber 
        """
        return _aerosol_property.AerosolProperty_scattering_coefficient_each_layer(self, wn)


    def phase_function_moment_each_layer(self, wn, nmom=-1, nscatt=-1):
        """

        virtual ArrayAd<double, 3> FullPhysics::AerosolProperty::phase_function_moment_each_layer(double wn, int nmom=-1, int nscatt=-1) const =0
        Return phase function moments for the given wave number for each
        layer.

        Note that we use the de Rooij convention for the scattering matrix
        moments.

        Parameters:
        -----------

        wn:  Wavenumber

        nmom:  Optional number of moments to return. Default is all moments.

        nscatt:  Optional number of scattering elements to return. Default is
        all of them.

        Phase function moment. This is nmom + 1 x nlayer x number scattering
        elements. 
        """
        return _aerosol_property.AerosolProperty_phase_function_moment_each_layer(self, wn, nmom, nscatt)


    def __str__(self):
        return _aerosol_property.AerosolProperty___str__(self)
AerosolProperty_swigregister = _aerosol_property.AerosolProperty_swigregister
AerosolProperty_swigregister(AerosolProperty)

class vector_aerosol_property(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_aerosol_property, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_aerosol_property, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _aerosol_property.vector_aerosol_property_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _aerosol_property.vector_aerosol_property___nonzero__(self)

    def __bool__(self):
        return _aerosol_property.vector_aerosol_property___bool__(self)

    def __len__(self):
        return _aerosol_property.vector_aerosol_property___len__(self)

    def __getslice__(self, i, j):
        return _aerosol_property.vector_aerosol_property___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _aerosol_property.vector_aerosol_property___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _aerosol_property.vector_aerosol_property___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _aerosol_property.vector_aerosol_property___delitem__(self, *args)

    def __getitem__(self, *args):
        return _aerosol_property.vector_aerosol_property___getitem__(self, *args)

    def __setitem__(self, *args):
        return _aerosol_property.vector_aerosol_property___setitem__(self, *args)

    def pop(self):
        return _aerosol_property.vector_aerosol_property_pop(self)

    def append(self, x):
        return _aerosol_property.vector_aerosol_property_append(self, x)

    def empty(self):
        return _aerosol_property.vector_aerosol_property_empty(self)

    def size(self):
        return _aerosol_property.vector_aerosol_property_size(self)

    def swap(self, v):
        return _aerosol_property.vector_aerosol_property_swap(self, v)

    def begin(self):
        return _aerosol_property.vector_aerosol_property_begin(self)

    def end(self):
        return _aerosol_property.vector_aerosol_property_end(self)

    def rbegin(self):
        return _aerosol_property.vector_aerosol_property_rbegin(self)

    def rend(self):
        return _aerosol_property.vector_aerosol_property_rend(self)

    def clear(self):
        return _aerosol_property.vector_aerosol_property_clear(self)

    def get_allocator(self):
        return _aerosol_property.vector_aerosol_property_get_allocator(self)

    def pop_back(self):
        return _aerosol_property.vector_aerosol_property_pop_back(self)

    def erase(self, *args):
        return _aerosol_property.vector_aerosol_property_erase(self, *args)

    def __init__(self, *args):
        this = _aerosol_property.new_vector_aerosol_property(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _aerosol_property.vector_aerosol_property_push_back(self, x)

    def front(self):
        return _aerosol_property.vector_aerosol_property_front(self)

    def back(self):
        return _aerosol_property.vector_aerosol_property_back(self)

    def assign(self, n, x):
        return _aerosol_property.vector_aerosol_property_assign(self, n, x)

    def resize(self, *args):
        return _aerosol_property.vector_aerosol_property_resize(self, *args)

    def insert(self, *args):
        return _aerosol_property.vector_aerosol_property_insert(self, *args)

    def reserve(self, n):
        return _aerosol_property.vector_aerosol_property_reserve(self, n)

    def capacity(self):
        return _aerosol_property.vector_aerosol_property_capacity(self)
    __swig_destroy__ = _aerosol_property.delete_vector_aerosol_property
    __del__ = lambda self: None
vector_aerosol_property_swigregister = _aerosol_property.vector_aerosol_property_swigregister
vector_aerosol_property_swigregister(vector_aerosol_property)

# This file is compatible with both classic and new-style classes.


