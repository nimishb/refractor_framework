# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_forward_model', [dirname(__file__)])
        except ImportError:
            import _forward_model
            return _forward_model
        if fp is not None:
            try:
                _mod = imp.load_module('_forward_model', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _forward_model = swig_import_helper()
    del swig_import_helper
else:
    import _forward_model
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_forward_model.SHARED_PTR_DISOWN_swigconstant(_forward_model)
SHARED_PTR_DISOWN = _forward_model.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class ForwardModel(full_physics_swig.generic_object.GenericObject):
    """

    This is the Forward Model.

    Note that the forward model depends on the value of the StateVector.
    This is set separate from getting the radiance or jacobian values.

    C++ includes: forward_model.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForwardModel, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForwardModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _forward_model.delete_ForwardModel
    __del__ = lambda self: None

    def __str__(self):
        return _forward_model.ForwardModel___str__(self)

    def _v_state_vector(self):
        """

        virtual boost::shared_ptr<StateVector> FullPhysics::ForwardModel::state_vector() const =0
        The state vector associated with the forward model. 
        """
        return _forward_model.ForwardModel__v_state_vector(self)


    @property
    def state_vector(self):
        return self._v_state_vector()


    def _v_number_spectrometer(self):
        """

        virtual int FullPhysics::ForwardModel::number_spectrometer() const =0
        The number of spectral bands associated with forward model. 
        """
        return _forward_model.ForwardModel__v_number_spectrometer(self)


    @property
    def number_spectrometer(self):
        return self._v_number_spectrometer()


    def hdf_band_name(self, Spec_index):
        """

        virtual std::string FullPhysics::ForwardModel::hdf_band_name(int Spec_index) const =0
        The HDF field name to use for a particular band (e.g., "weak_co2")

        """
        return _forward_model.ForwardModel_hdf_band_name(self, Spec_index)


    def spectral_domain(self, Spec_index):
        """

        virtual SpectralDomain FullPhysics::ForwardModel::spectral_domain(int Spec_index) const =0
        Spectral domain for the given spectral band.

        Note that this may be empty. 
        """
        return _forward_model.ForwardModel_spectral_domain(self, Spec_index)


    def radiance(self, Spec_index, Skip_jacobian=False):
        """

        virtual Spectrum FullPhysics::ForwardModel::radiance(int Spec_index, bool Skip_jacobian=false) const =0
        Spectrum for the given spectral band.

        Note that this may be empty.

        Parameters:
        -----------

        Spec_index:  Band to give value for

        Skip_jacobian:  If true, don't do the Jacobian calculation. Often this
        is significantly faster to calculate.

        The set of radiances, possibly empty. 
        """
        return _forward_model.ForwardModel_radiance(self, Spec_index, Skip_jacobian)


    def measured_radiance(self, Spec_index):
        """

        virtual Spectrum FullPhysics::ForwardModel::measured_radiance(int Spec_index) const =0
        Measured spectrum for the given spectral band.

        Note that this may be empty.

        Parameters:
        -----------

        Spec_index:  Band to give value for

        The set of radiances, possibly empty. 
        """
        return _forward_model.ForwardModel_measured_radiance(self, Spec_index)


    def setup_grid(self):
        """

        virtual void FullPhysics::ForwardModel::setup_grid()=0
        The grid that the forward model runs on may depend on the state
        vector.

        This notifies the forward model that it should setup the grid 
        """
        return _forward_model.ForwardModel_setup_grid(self)


    def radiance_all(self, Skip_jacobian=False):
        """

        Spectrum FullPhysics::ForwardModel::radiance_all(bool Skip_jacobian=false) const

        """
        return _forward_model.ForwardModel_radiance_all(self, Skip_jacobian)


    def _v_measured_radiance_all(self):
        """

        Spectrum FullPhysics::ForwardModel::measured_radiance_all() const

        """
        return _forward_model.ForwardModel__v_measured_radiance_all(self)


    @property
    def measured_radiance_all(self):
        return self._v_measured_radiance_all()


    def pixel_range(self, Spec_index):
        """

        boost::optional<blitz::Range> FullPhysics::ForwardModel::pixel_range(int Spec_index) const

        """
        return _forward_model.ForwardModel_pixel_range(self, Spec_index)


    def _v_input_file_description(self, *args):
        """

        void FullPhysics::ForwardModel::input_file_description(const std::string &V)

        """
        return _forward_model.ForwardModel__v_input_file_description(self, *args)


    @property
    def input_file_description(self):
        return self._v_input_file_description()

    @input_file_description.setter
    def input_file_description(self, value):
      self._v_input_file_description(value)

ForwardModel_swigregister = _forward_model.ForwardModel_swigregister
ForwardModel_swigregister(ForwardModel)

# This file is compatible with both classic and new-style classes.


