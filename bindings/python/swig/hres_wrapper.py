# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hres_wrapper', [dirname(__file__)])
        except ImportError:
            import _hres_wrapper
            return _hres_wrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_hres_wrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hres_wrapper = swig_import_helper()
    del swig_import_helper
else:
    import _hres_wrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_hres_wrapper.SHARED_PTR_DISOWN_swigconstant(_hres_wrapper)
SHARED_PTR_DISOWN = _hres_wrapper.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.radiative_transfer_single_wn
import full_physics_swig.radiative_transfer_fixed_stokes_coefficient
import full_physics_swig.radiative_transfer
import full_physics_swig.generic_object
import full_physics_swig.observer
import full_physics_swig.named_spectrum
import full_physics_swig.state_vector
class HresWrapper(full_physics_swig.radiative_transfer_single_wn.RadiativeTransferSingleWn):
    """

    For timing purposes, it can be useful to separate out the high
    resolution radiative transfer vs.

    the low resolution. Valgrind lumps them all together, since it is
    organized by function call and the same function is called for both
    high resolution and low resolution.

    This class provides an easy work around. It just forwards everything
    to an actual RadiativeTransferSingleWn class, but it wraps this in a
    separate function call. This then means valgrind lists this as
    separate.

    C++ includes: hres_wrapper.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.radiative_transfer_single_wn.RadiativeTransferSingleWn]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HresWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.radiative_transfer_single_wn.RadiativeTransferSingleWn]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HresWrapper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def _v_number_stokes(self):
        """

        virtual int FullPhysics::HresWrapper::number_stokes() const

        """
        return _hres_wrapper.HresWrapper__v_number_stokes(self)


    @property
    def number_stokes(self):
        return self._v_number_stokes()


    def _v_number_stream(self):
        """

        virtual int FullPhysics::HresWrapper::number_stream() const

        """
        return _hres_wrapper.HresWrapper__v_number_stream(self)


    @property
    def number_stream(self):
        return self._v_number_stream()


    def stokes_single_wn(self, Wn, Spec_index, Iv):
        """

        virtual blitz::Array<double, 1> FullPhysics::HresWrapper::stokes_single_wn(double Wn, int Spec_index, const ArrayAd< double, 2 > &Iv) const

        """
        return _hres_wrapper.HresWrapper_stokes_single_wn(self, Wn, Spec_index, Iv)


    def stokes_and_jacobian_single_wn(self, Wn, Spec_index, Iv):
        """

        virtual ArrayAd<double, 1> FullPhysics::HresWrapper::stokes_and_jacobian_single_wn(double Wn, int Spec_index, const ArrayAd< double, 2 > &Iv) const

        """
        return _hres_wrapper.HresWrapper_stokes_and_jacobian_single_wn(self, Wn, Spec_index, Iv)


    def _v_rt(self):
        """

        virtual boost::shared_ptr<RadiativeTransfer> FullPhysics::HresWrapper::rt() const

        """
        return _hres_wrapper.HresWrapper__v_rt(self)


    @property
    def rt(self):
        return self._v_rt()

    __swig_destroy__ = _hres_wrapper.delete_HresWrapper
    __del__ = lambda self: None
HresWrapper_swigregister = _hres_wrapper.HresWrapper_swigregister
HresWrapper_swigregister(HresWrapper)

# This file is compatible with both classic and new-style classes.


