# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_initial_guess_value', [dirname(__file__)])
        except ImportError:
            import _initial_guess_value
            return _initial_guess_value
        if fp is not None:
            try:
                _mod = imp.load_module('_initial_guess_value', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _initial_guess_value = swig_import_helper()
    del swig_import_helper
else:
    import _initial_guess_value
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_initial_guess_value.SHARED_PTR_DISOWN_swigconstant(_initial_guess_value)
SHARED_PTR_DISOWN = _initial_guess_value.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.composite_initial_guess
import full_physics_swig.generic_object
import full_physics_swig.initial_guess
class InitialGuessValue(full_physics_swig.composite_initial_guess.InitialGuessBuilder):
    """

    This is a simple implementation of InitialGuessBuilder that just has
    variables used to give the apriori, initial guess, and covariance.

    Since the initial guess of often just the apriori, the initial guess
    is allowed to be left empty and we just use the apriori in that case.

    C++ includes: initial_guess_value.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.composite_initial_guess.InitialGuessBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InitialGuessValue, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.composite_initial_guess.InitialGuessBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InitialGuessValue, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _initial_guess_value.delete_InitialGuessValue
    __del__ = lambda self: None

    def _v_number_element(self):
        """

        virtual int FullPhysics::InitialGuessValue::number_element() const

        """
        return _initial_guess_value.InitialGuessValue__v_number_element(self)


    @property
    def number_element(self):
        return self._v_number_element()


    def build_initial_value(self, v, index):
        """

        virtual void FullPhysics::InitialGuessValue::build_initial_value(blitz::Array< double, 1 > &v, int index) const

        """
        return _initial_guess_value.InitialGuessValue_build_initial_value(self, v, index)


    def build_apriori(self, v, index):
        """

        virtual void FullPhysics::InitialGuessValue::build_apriori(blitz::Array< double, 1 > &v, int index) const

        """
        return _initial_guess_value.InitialGuessValue_build_apriori(self, v, index)


    def build_apriori_covariance(self, m, index):
        """

        virtual void FullPhysics::InitialGuessValue::build_apriori_covariance(blitz::Array< double, 2 > &m, int index) const

        """
        return _initial_guess_value.InitialGuessValue_build_apriori_covariance(self, m, index)


    def _v_apriori(self, *args):
        """

        void FullPhysics::InitialGuessValue::apriori(const blitz::Array< double, 1 > &v)
        Set apriori value. 
        """
        return _initial_guess_value.InitialGuessValue__v_apriori(self, *args)


    @property
    def apriori(self):
        return self._v_apriori()

    @apriori.setter
    def apriori(self, value):
      self._v_apriori(value)


    def _v_apriori_covariance(self, *args):
        """

        void FullPhysics::InitialGuessValue::apriori_covariance(const blitz::Array< double, 2 > &m)
        Set apriori covariance value. 
        """
        return _initial_guess_value.InitialGuessValue__v_apriori_covariance(self, *args)


    @property
    def apriori_covariance(self):
        return self._v_apriori_covariance()

    @apriori_covariance.setter
    def apriori_covariance(self, value):
      self._v_apriori_covariance(value)


    def apriori_subset(self, Flag, V):
        """

        void FullPhysics::InitialGuessValue::apriori_subset(const blitz::Array< bool, 1 > &Flag, const blitz::Array< double, 1 >
        &V)

        """
        return _initial_guess_value.InitialGuessValue_apriori_subset(self, Flag, V)


    def apriori_covariance_subset(self, Flag, V):
        """

        void FullPhysics::InitialGuessValue::apriori_covariance_subset(const blitz::Array< bool, 1 > &Flag, const blitz::Array< double, 2 >
        &V)

        """
        return _initial_guess_value.InitialGuessValue_apriori_covariance_subset(self, Flag, V)


    def _v_initial_guess(self, *args):
        """

        void FullPhysics::InitialGuessValue::initial_guess(const blitz::Array< double, 1 > &v)
        Set first guess value. 
        """
        return _initial_guess_value.InitialGuessValue__v_initial_guess(self, *args)


    @property
    def initial_guess(self):
        return self._v_initial_guess()

    @initial_guess.setter
    def initial_guess(self, value):
      self._v_initial_guess(value)


    def __init__(self):
        this = _initial_guess_value.new_InitialGuessValue()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
InitialGuessValue_swigregister = _initial_guess_value.InitialGuessValue_swigregister
InitialGuessValue_swigregister(InitialGuessValue)

# This file is compatible with both classic and new-style classes.


