# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_polynomial_eval', [dirname(__file__)])
        except ImportError:
            import _polynomial_eval
            return _polynomial_eval
        if fp is not None:
            try:
                _mod = imp.load_module('_polynomial_eval', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _polynomial_eval = swig_import_helper()
    del swig_import_helper
else:
    import _polynomial_eval
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_polynomial_eval.SHARED_PTR_DISOWN_swigconstant(_polynomial_eval)
SHARED_PTR_DISOWN = _polynomial_eval.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class Poly1d(full_physics_swig.generic_object.GenericObject):
    """

    A one-dimensional polynomial class.

    A convenience class, used to encapsulate "natural" operations on
    polynomials so that said operations may take on their customary form
    in code.

    Evaluation is done Horner's Scheme to reduce problems due to round off
    error and overflows.

    Inspired by numpy.poly1d

    Additionally handles ArrayAd data correctly.

    C++ includes: polynomial_eval.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly1d, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Poly1d, name)
    __repr__ = _swig_repr

    def __init__(self, Coefficients):
        """

        FullPhysics::Poly1d::Poly1d(const ArrayAd< double, 1 > &Coefficients, const bool
        Decreasing_order=true)
        The polynomial's coefficients, in decreasing powers. 
        """
        this = _polynomial_eval.new_Poly1d(Coefficients)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __call__(self, *args):
        return _polynomial_eval.Poly1d___call__(self, *args)

    def __str__(self):
        return _polynomial_eval.Poly1d___str__(self)
    __swig_destroy__ = _polynomial_eval.delete_Poly1d
    __del__ = lambda self: None
Poly1d_swigregister = _polynomial_eval.Poly1d_swigregister
Poly1d_swigregister(Poly1d)

# This file is compatible with both classic and new-style classes.


