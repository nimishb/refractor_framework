# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_state_vector', [dirname(__file__)])
        except ImportError:
            import _state_vector
            return _state_vector
        if fp is not None:
            try:
                _mod = imp.load_module('_state_vector', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _state_vector = swig_import_helper()
    del swig_import_helper
else:
    import _state_vector
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x



_state_vector.SHARED_PTR_DISOWN_swigconstant(_state_vector)
SHARED_PTR_DISOWN = _state_vector.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class ObserverStateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObserverStateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObserverStateVector, name)
    __repr__ = _swig_repr

    def notify_add(self, Obs):
        return _state_vector.ObserverStateVector_notify_add(self, Obs)

    def notify_remove(self, Obs):
        return _state_vector.ObserverStateVector_notify_remove(self, Obs)

    def notify_update(self, Obs):
        return _state_vector.ObserverStateVector_notify_update(self, Obs)

    def __init__(self):
        if self.__class__ == ObserverStateVector:
            _self = None
        else:
            _self = self
        this = _state_vector.new_ObserverStateVector(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _state_vector.disown_ObserverStateVector(self)
        return weakref_proxy(self)
ObserverStateVector_swigregister = _state_vector.ObserverStateVector_swigregister
ObserverStateVector_swigregister(ObserverStateVector)

class ObservableStateVector(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObservableStateVector, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObservableStateVector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _state_vector.delete_ObservableStateVector
    __del__ = lambda self: None

    def add_observer_and_keep_reference(self, Obs):
        return _state_vector.ObservableStateVector_add_observer_and_keep_reference(self, Obs)

    def add_observer(self, Obs):
        return _state_vector.ObservableStateVector_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _state_vector.ObservableStateVector_remove_observer(self, Obs)
ObservableStateVector_swigregister = _state_vector.ObservableStateVector_swigregister
ObservableStateVector_swigregister(ObservableStateVector)

class StateVectorObserver(ObserverStateVector):
    __swig_setmethods__ = {}
    for _s in [ObserverStateVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVectorObserver, name, value)
    __swig_getmethods__ = {}
    for _s in [ObserverStateVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateVectorObserver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _state_vector.delete_StateVectorObserver
    __del__ = lambda self: None

    def __str__(self):
        return _state_vector.StateVectorObserver___str__(self)

    def mark_used(self, Sv, Used):
        return _state_vector.StateVectorObserver_mark_used(self, Sv, Used)

    def state_vector_name(self, Sv, Sv_name):
        return _state_vector.StateVectorObserver_state_vector_name(self, Sv, Sv_name)
StateVectorObserver_swigregister = _state_vector.StateVectorObserver_swigregister
StateVectorObserver_swigregister(StateVectorObserver)

class StateVector(ObservableStateVector):
    __swig_setmethods__ = {}
    for _s in [ObservableStateVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateVector, name, value)
    __swig_getmethods__ = {}
    for _s in [ObservableStateVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateVector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _state_vector.delete_StateVector
    __del__ = lambda self: None

    def __str__(self):
        return _state_vector.StateVector___str__(self)

    def __init__(self):
        this = _state_vector.new_StateVector()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def add_observer(self, Obs):
        return _state_vector.StateVector_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _state_vector.StateVector_remove_observer(self, Obs)

    def _v_state(self):
        return _state_vector.StateVector__v_state(self)

    @property
    def state(self):
        return self._v_state()


    def _v_state_with_derivative(self):
        return _state_vector.StateVector__v_state_with_derivative(self)

    @property
    def state_with_derivative(self):
        return self._v_state_with_derivative()


    def _state_vector_name(self):
        return _state_vector.StateVector__state_vector_name(self)

    @property
    def state_vector_name(self):
        return self._state_vector_name()


    def _v_state_covariance(self):
        return _state_vector.StateVector__v_state_covariance(self)

    @property
    def state_covariance(self):
        return self._v_state_covariance()


    def update_state(self, *args):
        return _state_vector.StateVector_update_state(self, *args)

    def _v_used_flag(self):
        return _state_vector.StateVector__v_used_flag(self)

    @property
    def used_flag(self):
        return self._v_used_flag()


    def _v_observer_claimed_size(self, *args):
        return _state_vector.StateVector__v_observer_claimed_size(self, *args)

    @property
    def observer_claimed_size(self):
        return self._v_observer_claimed_size()

    @observer_claimed_size.setter
    def observer_claimed_size(self, value):
      self._v_observer_claimed_size(value)

StateVector_swigregister = _state_vector.StateVector_swigregister
StateVector_swigregister(StateVector)

class SubStateVectorObserver(StateVectorObserver):
    __swig_setmethods__ = {}
    for _s in [StateVectorObserver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubStateVectorObserver, name, value)
    __swig_getmethods__ = {}
    for _s in [StateVectorObserver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubStateVectorObserver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _state_vector.delete_SubStateVectorObserver
    __del__ = lambda self: None

    def notify_update(self, Sv):
        return _state_vector.SubStateVectorObserver_notify_update(self, Sv)

    def mark_used(self, Sv, Used):
        return _state_vector.SubStateVectorObserver_mark_used(self, Sv, Used)

    def state_vector_name(self, Sv, Sv_name):
        return _state_vector.SubStateVectorObserver_state_vector_name(self, Sv, Sv_name)

    def _v_state_vector_start_index(self):
        return _state_vector.SubStateVectorObserver__v_state_vector_start_index(self)

    @property
    def state_vector_start_index(self):
        return self._v_state_vector_start_index()


    def _v_sub_vector_size(self):
        return _state_vector.SubStateVectorObserver__v_sub_vector_size(self)

    @property
    def sub_vector_size(self):
        return self._v_sub_vector_size()


    def update_sub_state(self, Sv_sub, Cov_sub):
        return _state_vector.SubStateVectorObserver_update_sub_state(self, Sv_sub, Cov_sub)

    def mark_used_sub(self, Used):
        return _state_vector.SubStateVectorObserver_mark_used_sub(self, Used)

    def state_vector_name_sub(self, Sv_name):
        return _state_vector.SubStateVectorObserver_state_vector_name_sub(self, Sv_name)

    def print_desc(self, Os):
        return _state_vector.SubStateVectorObserver_print_desc(self, Os)

    def notify_add(self, Sv):
        return _state_vector.SubStateVectorObserver_notify_add(self, Sv)

    def notify_remove(self, Sv):
        return _state_vector.SubStateVectorObserver_notify_remove(self, Sv)
SubStateVectorObserver_swigregister = _state_vector.SubStateVectorObserver_swigregister
SubStateVectorObserver_swigregister(SubStateVectorObserver)

# This file is compatible with both classic and new-style classes.


