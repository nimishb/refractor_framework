# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_auto_derivative', [dirname(__file__)])
        except ImportError:
            import _auto_derivative
            return _auto_derivative
        if fp is not None:
            try:
                _mod = imp.load_module('_auto_derivative', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _auto_derivative = swig_import_helper()
    del swig_import_helper
else:
    import _auto_derivative
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _auto_derivative.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _auto_derivative.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _auto_derivative.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _auto_derivative.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _auto_derivative.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _auto_derivative.SwigPyIterator_equal(self, x)

    def copy(self):
        return _auto_derivative.SwigPyIterator_copy(self)

    def next(self):
        return _auto_derivative.SwigPyIterator_next(self)

    def __next__(self):
        return _auto_derivative.SwigPyIterator___next__(self)

    def previous(self):
        return _auto_derivative.SwigPyIterator_previous(self)

    def advance(self, n):
        return _auto_derivative.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _auto_derivative.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _auto_derivative.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _auto_derivative.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _auto_derivative.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _auto_derivative.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _auto_derivative.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _auto_derivative.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_auto_derivative.SHARED_PTR_DISOWN_swigconstant(_auto_derivative)
SHARED_PTR_DISOWN = _auto_derivative.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class AutoDerivativeDouble(full_physics_swig.generic_object.GenericObject):
    """

    There are a number of tools that can be used to do "Automatic
    Differentiation" (see for
    examplehttp://www.autodiff.org/?module=Tools).

    We examined several of the tools, and while these packages have a
    number of advantages (in particular, the ability to run the
    calculation either forward or backwards) for our particular needs a
    simpler forward only calculation was selected. This uses a number of
    type T, along with the first order gradient with respect to a set of
    independent variables. We then overload the standard operations such
    as "+" and "*" to apply the chain rule, to propagate the
    derivatives forward.

    This is a newer field, so there doesn't seem to be standard
    terminology. In "Scientific and Engineering C++" by John Barton and
    Lee Nackman, this is call "Rall numbers" after a paper by L.B. Rall.
    On wikipedia athttp://en.wikipedia.org/wiki/Automatic_differentiation
    this is called "Automatic differentiation using dual numbers".

    As the existing automatic differentiation packages mature, we may want
    to revisit this choice and replace this class with a fuller library.

    This class is not as efficient as hand coding derivative calculation,
    although it is much easier to use. If profiling shows a particular
    bottle neck, you might want to hand code derivatives for that specific
    location, which can then be placed into a AutoDerivative for use
    elsewhere (see the Absco class for an example of doing this).

    See also ArrayAd which work with this class for Arrays of
    AutoDerivative.

    C++ includes: auto_derivative.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoDerivativeDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoDerivativeDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """

        FullPhysics::AutoDerivative< T >::AutoDerivative(const AutoDerivative< T > &D)
        Copy constructor. This does a deep copy. 
        """
        this = _auto_derivative.new_AutoDerivativeDouble(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _v_number_variable(self):
        """

        int FullPhysics::AutoDerivative< T >::number_variable() const
        Number of variables in gradient. 
        """
        return _auto_derivative.AutoDerivativeDouble__v_number_variable(self)


    @property
    def number_variable(self):
        return self._v_number_variable()


    def _v_is_constant(self):
        """

        bool FullPhysics::AutoDerivative< T >::is_constant() const
        Is this object a constant (with a gradient() all zeros)? 
        """
        return _auto_derivative.AutoDerivativeDouble__v_is_constant(self)


    @property
    def is_constant(self):
        return self._v_is_constant()


    def __lt__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___lt__(self, *args)

    def __gt__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___gt__(self, *args)

    def __eq__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___eq__(self, *args)

    def __iadd__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___iadd__(self, *args)

    def __isub__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___isub__(self, *args)

    def __imul__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___imul__(self, *args)

    def __idiv__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___idiv__(self, *args)

    def __str__(self):
        return _auto_derivative.AutoDerivativeDouble___str__(self)

    def _value(self):
        return _auto_derivative.AutoDerivativeDouble__value(self)

    def _value_set(self, V):
        return _auto_derivative.AutoDerivativeDouble__value_set(self, V)

    def _gradient(self):
        return _auto_derivative.AutoDerivativeDouble__gradient(self)

    def _gradient_set(self, V):
        return _auto_derivative.AutoDerivativeDouble__gradient_set(self, V)

    def __add__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___add__(self, *args)

    def __radd__(self, X):
        return _auto_derivative.AutoDerivativeDouble___radd__(self, X)

    def __sub__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___sub__(self, *args)

    def __rsub__(self, X):
        return _auto_derivative.AutoDerivativeDouble___rsub__(self, X)

    def __mul__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___mul__(self, *args)

    def __rmul__(self, X):
        return _auto_derivative.AutoDerivativeDouble___rmul__(self, X)

    def __div__(self, *args):
        return _auto_derivative.AutoDerivativeDouble___div__(self, *args)

    def __rdiv__(self, X):
        return _auto_derivative.AutoDerivativeDouble___rdiv__(self, X)

    def __pow__(self, X):
        return _auto_derivative.AutoDerivativeDouble___pow__(self, X)

    def __rpow__(self, X):
        return _auto_derivative.AutoDerivativeDouble___rpow__(self, X)

    @property
    def value(self):
      return self._value()

    @value.setter
    def value(self, val):
      self._value_set(val)

    @property
    def gradient(self):
      return self._gradient()

    @gradient.setter
    def gradient(self,val):
        self._gradient_set(val)

    __swig_destroy__ = _auto_derivative.delete_AutoDerivativeDouble
    __del__ = lambda self: None
AutoDerivativeDouble_swigregister = _auto_derivative.AutoDerivativeDouble_swigregister
AutoDerivativeDouble_swigregister(AutoDerivativeDouble)

class AutoDerivativeRefDouble(full_physics_swig.generic_object.GenericObject):
    """

    Helper class that gives us a reference that we can assign a
    AutoDerivative to and write into the correct space in a ArrayAd.

    C++ includes: auto_derivative.h 
    """

    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoDerivativeRefDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoDerivativeRefDouble, name)
    __repr__ = _swig_repr

    def __init__(self, V, FORCE_COPY):
        """

        FullPhysics::AutoDerivativeRef< T >::AutoDerivativeRef(T &V)

        """
        this = _auto_derivative.new_AutoDerivativeRefDouble(V, FORCE_COPY)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def _v_value(self):
        """

        T FullPhysics::AutoDerivativeRef< T >::value() const

        """
        return _auto_derivative.AutoDerivativeRefDouble__v_value(self)


    @property
    def value(self):
        return self._v_value()


    def _v_gradient(self):
        """

        const blitz::Array<T, 1>& FullPhysics::AutoDerivativeRef< T >::gradient() const

        """
        return _auto_derivative.AutoDerivativeRefDouble__v_gradient(self)


    @property
    def gradient(self):
        return self._v_gradient()


    def __str__(self):
        return _auto_derivative.AutoDerivativeRefDouble___str__(self)
    __swig_destroy__ = _auto_derivative.delete_AutoDerivativeRefDouble
    __del__ = lambda self: None
AutoDerivativeRefDouble_swigregister = _auto_derivative.AutoDerivativeRefDouble_swigregister
AutoDerivativeRefDouble_swigregister(AutoDerivativeRefDouble)

class ArrayAutoDerivative_double_1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayAutoDerivative_double_1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayAutoDerivative_double_1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _auto_derivative.new_ArrayAutoDerivative_double_1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def data(self):
        return _auto_derivative.ArrayAutoDerivative_double_1_data(self)

    def size(self):
        return _auto_derivative.ArrayAutoDerivative_double_1_size(self)

    def read(self, *args):
        return _auto_derivative.ArrayAutoDerivative_double_1_read(self, *args)

    def write(self, *args):
        return _auto_derivative.ArrayAutoDerivative_double_1_write(self, *args)

    def datav(self):
        return _auto_derivative.ArrayAutoDerivative_double_1_datav(self)

    def shape0(self):
        return _auto_derivative.ArrayAutoDerivative_double_1_shape0(self)

    def shape1(self):
        return _auto_derivative.ArrayAutoDerivative_double_1_shape1(self)

    def shape2(self):
        return _auto_derivative.ArrayAutoDerivative_double_1_shape2(self)

    def shape3(self):
        return _auto_derivative.ArrayAutoDerivative_double_1_shape3(self)
    __swig_destroy__ = _auto_derivative.delete_ArrayAutoDerivative_double_1
    __del__ = lambda self: None
ArrayAutoDerivative_double_1_swigregister = _auto_derivative.ArrayAutoDerivative_double_1_swigregister
ArrayAutoDerivative_double_1_swigregister(ArrayAutoDerivative_double_1)


def sqrt(x):
    """

    FullPhysics::AutoDerivative< double > std::sqrt(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.sqrt(x)

def log(x):
    """

    FullPhysics::AutoDerivative< double > std::log(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.log(x)

def log10(x):
    """

    FullPhysics::AutoDerivative< double > std::log10(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.log10(x)

def exp(x):
    """

    FullPhysics::AutoDerivative< double > std::exp(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.exp(x)

def sin(x):
    """

    FullPhysics::AutoDerivative< double > std::sin(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.sin(x)

def asin(x):
    """

    FullPhysics::AutoDerivative< double > std::asin(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.asin(x)

def cos(x):
    """

    FullPhysics::AutoDerivative< double > std::cos(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.cos(x)

def acos(x):
    """

    FullPhysics::AutoDerivative< double > std::acos(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.acos(x)

def tan(x):
    """

    FullPhysics::AutoDerivative< double > std::tan(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.tan(x)

def atan(x):
    """

    FullPhysics::AutoDerivative< double > std::atan(const FullPhysics::AutoDerivative< double > &x)

    """
    return _auto_derivative.atan(x)
class vector_auto_derivative(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_auto_derivative, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_auto_derivative, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _auto_derivative.vector_auto_derivative_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _auto_derivative.vector_auto_derivative___nonzero__(self)

    def __bool__(self):
        return _auto_derivative.vector_auto_derivative___bool__(self)

    def __len__(self):
        return _auto_derivative.vector_auto_derivative___len__(self)

    def __getslice__(self, i, j):
        return _auto_derivative.vector_auto_derivative___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _auto_derivative.vector_auto_derivative___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _auto_derivative.vector_auto_derivative___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _auto_derivative.vector_auto_derivative___delitem__(self, *args)

    def __getitem__(self, *args):
        return _auto_derivative.vector_auto_derivative___getitem__(self, *args)

    def __setitem__(self, *args):
        return _auto_derivative.vector_auto_derivative___setitem__(self, *args)

    def pop(self):
        return _auto_derivative.vector_auto_derivative_pop(self)

    def append(self, x):
        return _auto_derivative.vector_auto_derivative_append(self, x)

    def empty(self):
        return _auto_derivative.vector_auto_derivative_empty(self)

    def size(self):
        return _auto_derivative.vector_auto_derivative_size(self)

    def swap(self, v):
        return _auto_derivative.vector_auto_derivative_swap(self, v)

    def begin(self):
        return _auto_derivative.vector_auto_derivative_begin(self)

    def end(self):
        return _auto_derivative.vector_auto_derivative_end(self)

    def rbegin(self):
        return _auto_derivative.vector_auto_derivative_rbegin(self)

    def rend(self):
        return _auto_derivative.vector_auto_derivative_rend(self)

    def clear(self):
        return _auto_derivative.vector_auto_derivative_clear(self)

    def get_allocator(self):
        return _auto_derivative.vector_auto_derivative_get_allocator(self)

    def pop_back(self):
        return _auto_derivative.vector_auto_derivative_pop_back(self)

    def erase(self, *args):
        return _auto_derivative.vector_auto_derivative_erase(self, *args)

    def __init__(self, *args):
        this = _auto_derivative.new_vector_auto_derivative(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _auto_derivative.vector_auto_derivative_push_back(self, x)

    def front(self):
        return _auto_derivative.vector_auto_derivative_front(self)

    def back(self):
        return _auto_derivative.vector_auto_derivative_back(self)

    def assign(self, n, x):
        return _auto_derivative.vector_auto_derivative_assign(self, n, x)

    def resize(self, *args):
        return _auto_derivative.vector_auto_derivative_resize(self, *args)

    def insert(self, *args):
        return _auto_derivative.vector_auto_derivative_insert(self, *args)

    def reserve(self, n):
        return _auto_derivative.vector_auto_derivative_reserve(self, n)

    def capacity(self):
        return _auto_derivative.vector_auto_derivative_capacity(self)
    __swig_destroy__ = _auto_derivative.delete_vector_auto_derivative
    __del__ = lambda self: None
vector_auto_derivative_swigregister = _auto_derivative.vector_auto_derivative_swigregister
vector_auto_derivative_swigregister(vector_auto_derivative)

# This file is compatible with both classic and new-style classes.


