# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_altitude', [dirname(__file__)])
        except ImportError:
            import _altitude
            return _altitude
        if fp is not None:
            try:
                _mod = imp.load_module('_altitude', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _altitude = swig_import_helper()
    del swig_import_helper
else:
    import _altitude
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _altitude.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _altitude.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _altitude.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _altitude.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _altitude.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _altitude.SwigPyIterator_equal(self, x)

    def copy(self):
        return _altitude.SwigPyIterator_copy(self)

    def next(self):
        return _altitude.SwigPyIterator_next(self)

    def __next__(self):
        return _altitude.SwigPyIterator___next__(self)

    def previous(self):
        return _altitude.SwigPyIterator_previous(self)

    def advance(self, n):
        return _altitude.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _altitude.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _altitude.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _altitude.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _altitude.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _altitude.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _altitude.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _altitude.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_altitude.SHARED_PTR_DISOWN_swigconstant(_altitude)
SHARED_PTR_DISOWN = _altitude.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
import full_physics_swig.state_vector
class ObservableAltitude(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObservableAltitude, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObservableAltitude, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _altitude.delete_ObservableAltitude
    __del__ = lambda self: None

    def add_observer_and_keep_reference(self, Obs):
        return _altitude.ObservableAltitude_add_observer_and_keep_reference(self, Obs)

    def add_observer(self, Obs):
        return _altitude.ObservableAltitude_add_observer(self, Obs)

    def remove_observer(self, Obs):
        return _altitude.ObservableAltitude_remove_observer(self, Obs)
ObservableAltitude_swigregister = _altitude.ObservableAltitude_swigregister
ObservableAltitude_swigregister(ObservableAltitude)

class ObserverAltitude(full_physics_swig.generic_object.GenericObject):
    __swig_setmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObserverAltitude, name, value)
    __swig_getmethods__ = {}
    for _s in [full_physics_swig.generic_object.GenericObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObserverAltitude, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _altitude.new_ObserverAltitude()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _altitude.delete_ObserverAltitude
    __del__ = lambda self: None

    def notify_update(self, Observed_object):
        return _altitude.ObserverAltitude_notify_update(self, Observed_object)

    def notify_add(self, Observed_object):
        return _altitude.ObserverAltitude_notify_add(self, Observed_object)

    def notify_remove(self, Observed_object):
        return _altitude.ObserverAltitude_notify_remove(self, Observed_object)
ObserverAltitude_swigregister = _altitude.ObserverAltitude_swigregister
ObserverAltitude_swigregister(ObserverAltitude)

class Altitude(ObservableAltitude):
    """

    The class handles the calculation of the altitude and gravity
    constants.

    Other objects may depend on the altitude, and should be updated when
    the altitude is updated. To facilitate that, this class in an
    Oberverable, and objects can add themselves as Observers to be
    notified when the temperature is updated.

    C++ includes: altitude.h 
    """

    __swig_setmethods__ = {}
    for _s in [ObservableAltitude]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Altitude, name, value)
    __swig_getmethods__ = {}
    for _s in [ObservableAltitude]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Altitude, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _altitude.delete_Altitude
    __del__ = lambda self: None

    def __str__(self):
        return _altitude.Altitude___str__(self)

    def print_desc(self, Os):
        """

        virtual void FullPhysics::Altitude::print(std::ostream &Os) const

        """
        return _altitude.Altitude_print_desc(self, Os)


    def add_observer(self, Obs):
        """

        virtual void FullPhysics::Altitude::add_observer(Observer< Altitude > &Obs)

        """
        return _altitude.Altitude_add_observer(self, Obs)


    def remove_observer(self, Obs):
        """

        virtual void FullPhysics::Altitude::remove_observer(Observer< Altitude > &Obs)

        """
        return _altitude.Altitude_remove_observer(self, Obs)


    def altitude(self, P):
        """

        virtual AutoDerivativeWithUnit<double> FullPhysics::Altitude::altitude(const AutoDerivativeWithUnit< double > &P) const =0
        Return altitude grid for the given pressure. 
        """
        return _altitude.Altitude_altitude(self, P)


    def gravity(self, P):
        """

        virtual AutoDerivativeWithUnit<double> FullPhysics::Altitude::gravity(const AutoDerivativeWithUnit< double > &P) const =0
        Return gravity constant for the given pressure. 
        """
        return _altitude.Altitude_gravity(self, P)


    def clone(self, *args):
        """

        virtual boost::shared_ptr<Altitude> FullPhysics::Altitude::clone(const boost::shared_ptr< Pressure > &Press, const boost::shared_ptr<
        Temperature > &Temp) const =0
        This version of clone takes a pressure and temperature to use.

        The intent is that the pressure and temperature has been cloned from
        the original pressure and temperature (although this class has no way
        to verify this). This allows sets of objects to be cloned using a
        common Pressure and Temperature clone, e.g. Atmosphere. 
        """
        return _altitude.Altitude_clone(self, *args)


    def __init__(self):
        if self.__class__ == Altitude:
            _self = None
        else:
            _self = self
        this = _altitude.new_Altitude(_self, )
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _altitude.disown_Altitude(self)
        return weakref_proxy(self)
Altitude_swigregister = _altitude.Altitude_swigregister
Altitude_swigregister(Altitude)

class vector_altitude(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_altitude, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_altitude, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _altitude.vector_altitude_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _altitude.vector_altitude___nonzero__(self)

    def __bool__(self):
        return _altitude.vector_altitude___bool__(self)

    def __len__(self):
        return _altitude.vector_altitude___len__(self)

    def __getslice__(self, i, j):
        return _altitude.vector_altitude___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _altitude.vector_altitude___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _altitude.vector_altitude___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _altitude.vector_altitude___delitem__(self, *args)

    def __getitem__(self, *args):
        return _altitude.vector_altitude___getitem__(self, *args)

    def __setitem__(self, *args):
        return _altitude.vector_altitude___setitem__(self, *args)

    def pop(self):
        return _altitude.vector_altitude_pop(self)

    def append(self, x):
        return _altitude.vector_altitude_append(self, x)

    def empty(self):
        return _altitude.vector_altitude_empty(self)

    def size(self):
        return _altitude.vector_altitude_size(self)

    def swap(self, v):
        return _altitude.vector_altitude_swap(self, v)

    def begin(self):
        return _altitude.vector_altitude_begin(self)

    def end(self):
        return _altitude.vector_altitude_end(self)

    def rbegin(self):
        return _altitude.vector_altitude_rbegin(self)

    def rend(self):
        return _altitude.vector_altitude_rend(self)

    def clear(self):
        return _altitude.vector_altitude_clear(self)

    def get_allocator(self):
        return _altitude.vector_altitude_get_allocator(self)

    def pop_back(self):
        return _altitude.vector_altitude_pop_back(self)

    def erase(self, *args):
        return _altitude.vector_altitude_erase(self, *args)

    def __init__(self, *args):
        this = _altitude.new_vector_altitude(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _altitude.vector_altitude_push_back(self, x)

    def front(self):
        return _altitude.vector_altitude_front(self)

    def back(self):
        return _altitude.vector_altitude_back(self)

    def assign(self, n, x):
        return _altitude.vector_altitude_assign(self, n, x)

    def resize(self, *args):
        return _altitude.vector_altitude_resize(self, *args)

    def insert(self, *args):
        return _altitude.vector_altitude_insert(self, *args)

    def reserve(self, n):
        return _altitude.vector_altitude_reserve(self, n)

    def capacity(self):
        return _altitude.vector_altitude_capacity(self)
    __swig_destroy__ = _altitude.delete_vector_altitude
    __del__ = lambda self: None
vector_altitude_swigregister = _altitude.vector_altitude_swigregister
vector_altitude_swigregister(vector_altitude)

# This file is compatible with both classic and new-style classes.


